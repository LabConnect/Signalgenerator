
Sgen-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000fd4  00001068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800124  00800124  0000108c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000668  00000000  00000000  0000109d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a424  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002b74  00000000  00000000  0000bb29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000058b6  00000000  00000000  0000e69d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f08  00000000  00000000  00013f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003ab3  00000000  00000000  00014e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000069b8  00000000  00000000  0001890f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000788  00000000  00000000  0001f2c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	82 c0       	rjmp	.+260    	; 0x106 <__ctors_end>
   2:	00 00       	nop
   4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
   6:	00 00       	nop
   8:	99 c0       	rjmp	.+306    	; 0x13c <__bad_interrupt>
   a:	00 00       	nop
   c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
   e:	00 00       	nop
  10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
  12:	00 00       	nop
  14:	93 c0       	rjmp	.+294    	; 0x13c <__bad_interrupt>
  16:	00 00       	nop
  18:	91 c0       	rjmp	.+290    	; 0x13c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
  1e:	00 00       	nop
  20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
  22:	00 00       	nop
  24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
  26:	00 00       	nop
  28:	89 c0       	rjmp	.+274    	; 0x13c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a0 c3       	rjmp	.+1856   	; 0x76e <__vector_11>
  2e:	00 00       	nop
  30:	85 c0       	rjmp	.+266    	; 0x13c <__bad_interrupt>
  32:	00 00       	nop
  34:	83 c0       	rjmp	.+262    	; 0x13c <__bad_interrupt>
  36:	00 00       	nop
  38:	81 c0       	rjmp	.+258    	; 0x13c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7f c0       	rjmp	.+254    	; 0x13c <__bad_interrupt>
  3e:	00 00       	nop
  40:	7d c0       	rjmp	.+250    	; 0x13c <__bad_interrupt>
  42:	00 00       	nop
  44:	7b c0       	rjmp	.+246    	; 0x13c <__bad_interrupt>
  46:	00 00       	nop
  48:	79 c0       	rjmp	.+242    	; 0x13c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	77 c0       	rjmp	.+238    	; 0x13c <__bad_interrupt>
  4e:	00 00       	nop
  50:	75 c0       	rjmp	.+234    	; 0x13c <__bad_interrupt>
  52:	00 00       	nop
  54:	73 c0       	rjmp	.+230    	; 0x13c <__bad_interrupt>
  56:	00 00       	nop
  58:	71 c0       	rjmp	.+226    	; 0x13c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6f c0       	rjmp	.+222    	; 0x13c <__bad_interrupt>
  5e:	00 00       	nop
  60:	6d c0       	rjmp	.+218    	; 0x13c <__bad_interrupt>
  62:	00 00       	nop
  64:	6b c0       	rjmp	.+214    	; 0x13c <__bad_interrupt>
  66:	00 00       	nop
  68:	69 c0       	rjmp	.+210    	; 0x13c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	67 c0       	rjmp	.+206    	; 0x13c <__bad_interrupt>
  6e:	00 00       	nop
  70:	65 c0       	rjmp	.+202    	; 0x13c <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	20 03 53 00 69 00 67 00 6e 00 61 00 6c 00 67 00      .S.i.g.n.a.l.g.
  84:	65 00 6e 00 65 00 72 00 61 00 74 00 6f 00 72 00     e.n.e.r.a.t.o.r.
  94:	00 00                                               ..

00000096 <ManufacturerString>:
  96:	16 03 4c 00 61 00 62 00 43 00 6f 00 6e 00 6e 00     ..L.a.b.C.o.n.n.
  a6:	65 00 63 00 74 00 00 00                             e.c.t...

000000ae <LanguageString>:
  ae:	04 03 09 04                                         ....

000000b2 <ConfigurationDescriptor>:
  b2:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  c2:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
  d2:	00 05                                               ..

000000d4 <DeviceDescriptor>:
  d4:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
  e4:	00 01                                               ..

000000e6 <GenericReport>:
  e6:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
  f6:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

00000106 <__ctors_end>:
 106:	11 24       	eor	r1, r1
 108:	1f be       	out	0x3f, r1	; 63
 10a:	cf ef       	ldi	r28, 0xFF	; 255
 10c:	d4 e0       	ldi	r29, 0x04	; 4
 10e:	de bf       	out	0x3e, r29	; 62
 110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
 112:	11 e0       	ldi	r17, 0x01	; 1
 114:	a0 e0       	ldi	r26, 0x00	; 0
 116:	b1 e0       	ldi	r27, 0x01	; 1
 118:	e4 ed       	ldi	r30, 0xD4	; 212
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
 11e:	05 90       	lpm	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	a4 32       	cpi	r26, 0x24	; 36
 124:	b1 07       	cpc	r27, r17
 126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	a4 e2       	ldi	r26, 0x24	; 36
 12c:	b1 e0       	ldi	r27, 0x01	; 1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
 130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
 132:	a9 33       	cpi	r26, 0x39	; 57
 134:	b2 07       	cpc	r27, r18
 136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
 138:	4b d0       	rcall	.+150    	; 0x1d0 <main>
 13a:	4a c7       	rjmp	.+3732   	; 0xfd0 <_exit>

0000013c <__bad_interrupt>:
 13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <EVENT_USB_Device_Connect>:
	Init_Serial_Stuff();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 13e:	08 95       	ret

00000140 <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 140:	08 95       	ret

00000142 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	57 d6       	rcall	.+3246   	; 0xdf6 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 148:	e2 ee       	ldi	r30, 0xE2	; 226
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	1c c5       	rjmp	.+2616   	; 0xb92 <HID_Device_ProcessControlRequest>

0000015a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 15a:	80 91 0e 01 	lds	r24, 0x010E
 15e:	90 91 0f 01 	lds	r25, 0x010F
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	29 f0       	breq	.+10     	; 0x170 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	90 93 0f 01 	sts	0x010F, r25
 16c:	80 93 0e 01 	sts	0x010E, r24
 170:	08 95       	ret

00000172 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
	uint8_t* Data        = (uint8_t*)ReportData;


	*ReportSize = GENERIC_REPORT_SIZE;
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	f8 01       	movw	r30, r16
 17c:	91 83       	std	Z+1, r25	; 0x01
 17e:	80 83       	st	Z, r24

	return false;
}
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <Init_Serial_Stuff>:
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
 188:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
 18a:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	86 60       	ori	r24, 0x06	; 6
 190:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
 192:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
 194:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
 196:	8d b5       	in	r24, 0x2d	; 45
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
 19c:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
 19e:	81 e5       	ldi	r24, 0x51	; 81
 1a0:	8c bd       	out	0x2c, r24	; 44
 1a2:	08 95       	ret

000001a4 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{

	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1a4:	84 b7       	in	r24, 0x34	; 52
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1aa:	88 e1       	ldi	r24, 0x18	; 24
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	80 93 60 00 	sts	0x0060, r24
 1b4:	10 92 60 00 	sts	0x0060, r1
 1b8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	80 93 61 00 	sts	0x0061, r24
 1c6:	90 93 61 00 	sts	0x0061, r25
 1ca:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
 1cc:	c1 d2       	rcall	.+1410   	; 0x750 <USB_Init>
	Init_Serial_Stuff();
 1ce:	dc cf       	rjmp	.-72     	; 0x188 <Init_Serial_Stuff>

000001d0 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 1d0:	e9 df       	rcall	.-46     	; 0x1a4 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 1d2:	78 94       	sei

	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Generic_HID_Interface);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	21 d6       	rcall	.+3138   	; 0xe1c <HID_Device_USBTask>
		USB_USBTask();
 1da:	bf d4       	rcall	.+2430   	; 0xb5a <USB_USBTask>
 1dc:	fb cf       	rjmp	.-10     	; 0x1d4 <main+0x4>

000001de <S_S>:
	SPI_Init(SPI_SPEED_FCPU_DIV_8 | SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_ORDER_MSB_FIRST | SPI_MODE_MASTER);
}

void S_S(int SlaveBit)
{
	if(SlaveBit == 1)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <S_S+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8a e1       	ldi	r24, 0x1A	; 26
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <S_S+0x8>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <S_S+0xe>
	{
		_delay_us(5);
		PORTB |= (1 << 0);
 1ec:	28 9a       	sbi	0x05, 0	; 5
 1ee:	08 95       	ret
	}
	else if (SlaveBit == 0)
 1f0:	89 2b       	or	r24, r25
 1f2:	29 f4       	brne	.+10     	; 0x1fe <S_S+0x20>
	{
		PORTB &= ~(1 << 0);
 1f4:	28 98       	cbi	0x05, 0	; 5
 1f6:	8a e1       	ldi	r24, 0x1A	; 26
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <S_S+0x1a>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <S_S+0x20>
 1fe:	08 95       	ret

00000200 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	f9 01       	movw	r30, r18
 206:	a0 e1       	ldi	r26, 0x10	; 16
 208:	b1 e0       	ldi	r27, 0x01	; 1
 20a:	00 5f       	subi	r16, 0xF0	; 240
 20c:	1e 4f       	sbci	r17, 0xFE	; 254
	uint8_t* Data       = (uint8_t*)ReportData;

	for (int i=0; i<ReportSize; i++)
 20e:	a0 17       	cp	r26, r16
 210:	b1 07       	cpc	r27, r17
 212:	19 f0       	breq	.+6      	; 0x21a <CALLBACK_HID_Device_ProcessHIDReport+0x1a>
	{
		DeviceConfig[i] = Data[i];
 214:	81 91       	ld	r24, Z+
 216:	8d 93       	st	X+, r24
 218:	fa cf       	rjmp	.-12     	; 0x20e <CALLBACK_HID_Device_ProcessHIDReport+0xe>
	}

	
	S_S(0);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	df df       	rcall	.-66     	; 0x1de <S_S>
	SPI_SendByte(DeviceConfig[0]);
 220:	80 91 10 01 	lds	r24, 0x0110
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
 224:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 226:	0d b4       	in	r0, 0x2d	; 45
 228:	07 fe       	sbrs	r0, 7
 22a:	fd cf       	rjmp	.-6      	; 0x226 <CALLBACK_HID_Device_ProcessHIDReport+0x26>
	SPI_SendByte(DeviceConfig[1]);
 22c:	80 91 11 01 	lds	r24, 0x0111
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
 230:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 232:	0d b4       	in	r0, 0x2d	; 45
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <CALLBACK_HID_Device_ProcessHIDReport+0x32>
	S_S(1);
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
	

}
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16

	
	S_S(0);
	SPI_SendByte(DeviceConfig[0]);
	SPI_SendByte(DeviceConfig[1]);
	S_S(1);
 240:	ce cf       	rjmp	.-100    	; 0x1de <S_S>

00000242 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 242:	29 2f       	mov	r18, r25
 244:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 246:	23 30       	cpi	r18, 0x03	; 3
 248:	31 05       	cpc	r19, r1
 24a:	b9 f0       	breq	.+46     	; 0x27a <CALLBACK_USB_GetDescriptor+0x38>
 24c:	5c f4       	brge	.+22     	; 0x264 <CALLBACK_USB_GetDescriptor+0x22>
 24e:	21 30       	cpi	r18, 0x01	; 1
 250:	31 05       	cpc	r19, r1
 252:	69 f1       	breq	.+90     	; 0x2ae <CALLBACK_USB_GetDescriptor+0x6c>
 254:	22 30       	cpi	r18, 0x02	; 2
 256:	31 05       	cpc	r19, r1
 258:	79 f5       	brne	.+94     	; 0x2b8 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 25a:	82 e2       	ldi	r24, 0x22	; 34
 25c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 25e:	22 eb       	ldi	r18, 0xB2	; 178
 260:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 262:	2e c0       	rjmp	.+92     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 264:	21 32       	cpi	r18, 0x21	; 33
 266:	31 05       	cpc	r19, r1
 268:	e9 f0       	breq	.+58     	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x62>
 26a:	22 32       	cpi	r18, 0x22	; 34
 26c:	31 05       	cpc	r19, r1
 26e:	21 f5       	brne	.+72     	; 0x2b8 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
 274:	26 ee       	ldi	r18, 0xE6	; 230
 276:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(GenericReport);
			break;
 278:	23 c0       	rjmp	.+70     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x7e>
 27a:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	91 05       	cpc	r25, r1
 280:	41 f0       	breq	.+16     	; 0x292 <CALLBACK_USB_GetDescriptor+0x50>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	91 05       	cpc	r25, r1
 286:	41 f0       	breq	.+16     	; 0x298 <CALLBACK_USB_GetDescriptor+0x56>
 288:	89 2b       	or	r24, r25
 28a:	b1 f4       	brne	.+44     	; 0x2b8 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 28c:	ee ea       	ldi	r30, 0xAE	; 174
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	05 c0       	rjmp	.+10     	; 0x29c <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 292:	e6 e9       	ldi	r30, 0x96	; 150
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 298:	e4 e7       	ldi	r30, 0x74	; 116
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	84 91       	lpm	r24, Z
 29e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 2a0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 2a4:	89 e0       	ldi	r24, 0x09	; 9
 2a6:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
 2a8:	24 ec       	ldi	r18, 0xC4	; 196
 2aa:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 2ae:	82 e1       	ldi	r24, 0x12	; 18
 2b0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 2b2:	24 ed       	ldi	r18, 0xD4	; 212
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
 2c0:	fa 01       	movw	r30, r20
 2c2:	31 83       	std	Z+1, r19	; 0x01
 2c4:	20 83       	st	Z, r18
	return Size;
}
 2c6:	08 95       	ret

000002c8 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	7c 01       	movw	r14, r24
 2da:	8b 01       	movw	r16, r22
 2dc:	ea 01       	movw	r28, r20
 2de:	cf d1       	rcall	.+926    	; 0x67e <Endpoint_WaitUntilReady>
 2e0:	81 11       	cpse	r24, r1
 2e2:	31 c0       	rjmp	.+98     	; 0x346 <Endpoint_Write_Stream_LE+0x7e>
 2e4:	20 97       	sbiw	r28, 0x00	; 0
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <Endpoint_Write_Stream_LE+0x2c>
 2e8:	88 81       	ld	r24, Y
 2ea:	99 81       	ldd	r25, Y+1	; 0x01
 2ec:	08 1b       	sub	r16, r24
 2ee:	19 0b       	sbc	r17, r25
 2f0:	e8 0e       	add	r14, r24
 2f2:	f9 1e       	adc	r15, r25
 2f4:	c1 2c       	mov	r12, r1
 2f6:	d1 2c       	mov	r13, r1
 2f8:	01 15       	cp	r16, r1
 2fa:	11 05       	cpc	r17, r1
 2fc:	19 f1       	breq	.+70     	; 0x344 <Endpoint_Write_Stream_LE+0x7c>
 2fe:	80 91 e8 00 	lds	r24, 0x00E8
 302:	85 fd       	sbrc	r24, 5
 304:	14 c0       	rjmp	.+40     	; 0x32e <Endpoint_Write_Stream_LE+0x66>
 306:	80 91 e8 00 	lds	r24, 0x00E8
 30a:	8e 77       	andi	r24, 0x7E	; 126
 30c:	80 93 e8 00 	sts	0x00E8, r24
 310:	24 d4       	rcall	.+2120   	; 0xb5a <USB_USBTask>
 312:	20 97       	sbiw	r28, 0x00	; 0
 314:	41 f0       	breq	.+16     	; 0x326 <Endpoint_Write_Stream_LE+0x5e>
 316:	88 81       	ld	r24, Y
 318:	99 81       	ldd	r25, Y+1	; 0x01
 31a:	8c 0d       	add	r24, r12
 31c:	9d 1d       	adc	r25, r13
 31e:	99 83       	std	Y+1, r25	; 0x01
 320:	88 83       	st	Y, r24
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	10 c0       	rjmp	.+32     	; 0x346 <Endpoint_Write_Stream_LE+0x7e>
 326:	ab d1       	rcall	.+854    	; 0x67e <Endpoint_WaitUntilReady>
 328:	88 23       	and	r24, r24
 32a:	31 f3       	breq	.-52     	; 0x2f8 <Endpoint_Write_Stream_LE+0x30>
 32c:	0c c0       	rjmp	.+24     	; 0x346 <Endpoint_Write_Stream_LE+0x7e>
 32e:	f7 01       	movw	r30, r14
 330:	81 91       	ld	r24, Z+
 332:	7f 01       	movw	r14, r30
 334:	80 93 f1 00 	sts	0x00F1, r24
 338:	01 50       	subi	r16, 0x01	; 1
 33a:	11 09       	sbc	r17, r1
 33c:	ff ef       	ldi	r31, 0xFF	; 255
 33e:	cf 1a       	sub	r12, r31
 340:	df 0a       	sbc	r13, r31
 342:	da cf       	rjmp	.-76     	; 0x2f8 <Endpoint_Write_Stream_LE+0x30>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	08 95       	ret

00000358 <Endpoint_Write_Control_Stream_LE>:
 358:	20 91 37 01 	lds	r18, 0x0137
 35c:	30 91 38 01 	lds	r19, 0x0138
 360:	26 17       	cp	r18, r22
 362:	37 07       	cpc	r19, r23
 364:	48 f0       	brcs	.+18     	; 0x378 <Endpoint_Write_Control_Stream_LE+0x20>
 366:	61 15       	cp	r22, r1
 368:	71 05       	cpc	r23, r1
 36a:	39 f4       	brne	.+14     	; 0x37a <Endpoint_Write_Control_Stream_LE+0x22>
 36c:	20 91 e8 00 	lds	r18, 0x00E8
 370:	2e 77       	andi	r18, 0x7E	; 126
 372:	20 93 e8 00 	sts	0x00E8, r18
 376:	01 c0       	rjmp	.+2      	; 0x37a <Endpoint_Write_Control_Stream_LE+0x22>
 378:	b9 01       	movw	r22, r18
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	61 15       	cp	r22, r1
 37e:	71 05       	cpc	r23, r1
 380:	d1 f1       	breq	.+116    	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0x9e>
 382:	30 91 30 01 	lds	r19, 0x0130
 386:	33 23       	and	r19, r19
 388:	09 f4       	brne	.+2      	; 0x38c <Endpoint_Write_Control_Stream_LE+0x34>
 38a:	43 c0       	rjmp	.+134    	; 0x412 <Endpoint_Write_Control_Stream_LE+0xba>
 38c:	35 30       	cpi	r19, 0x05	; 5
 38e:	09 f4       	brne	.+2      	; 0x392 <Endpoint_Write_Control_Stream_LE+0x3a>
 390:	42 c0       	rjmp	.+132    	; 0x416 <Endpoint_Write_Control_Stream_LE+0xbe>
 392:	30 91 e8 00 	lds	r19, 0x00E8
 396:	33 fd       	sbrc	r19, 3
 398:	40 c0       	rjmp	.+128    	; 0x41a <Endpoint_Write_Control_Stream_LE+0xc2>
 39a:	30 91 e8 00 	lds	r19, 0x00E8
 39e:	32 ff       	sbrs	r19, 2
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <Endpoint_Write_Control_Stream_LE+0x56>
 3a2:	80 91 e8 00 	lds	r24, 0x00E8
 3a6:	82 ff       	sbrs	r24, 2
 3a8:	29 c0       	rjmp	.+82     	; 0x3fc <Endpoint_Write_Control_Stream_LE+0xa4>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	30 91 e8 00 	lds	r19, 0x00E8
 3b2:	30 ff       	sbrs	r19, 0
 3b4:	e3 cf       	rjmp	.-58     	; 0x37c <Endpoint_Write_Control_Stream_LE+0x24>
 3b6:	20 91 f2 00 	lds	r18, 0x00F2
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	28 1b       	sub	r18, r24
 3c0:	39 0b       	sbc	r19, r25
 3c2:	cf 01       	movw	r24, r30
 3c4:	82 0f       	add	r24, r18
 3c6:	93 1f       	adc	r25, r19
 3c8:	61 15       	cp	r22, r1
 3ca:	71 05       	cpc	r23, r1
 3cc:	49 f0       	breq	.+18     	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x88>
 3ce:	88 30       	cpi	r24, 0x08	; 8
 3d0:	91 05       	cpc	r25, r1
 3d2:	30 f4       	brcc	.+12     	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x88>
 3d4:	81 91       	ld	r24, Z+
 3d6:	80 93 f1 00 	sts	0x00F1, r24
 3da:	61 50       	subi	r22, 0x01	; 1
 3dc:	71 09       	sbc	r23, r1
 3de:	f1 cf       	rjmp	.-30     	; 0x3c2 <Endpoint_Write_Control_Stream_LE+0x6a>
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	08 97       	sbiw	r24, 0x08	; 8
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <Endpoint_Write_Control_Stream_LE+0x90>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	80 91 e8 00 	lds	r24, 0x00E8
 3ec:	8e 77       	andi	r24, 0x7E	; 126
 3ee:	80 93 e8 00 	sts	0x00E8, r24
 3f2:	cf 01       	movw	r24, r30
 3f4:	c3 cf       	rjmp	.-122    	; 0x37c <Endpoint_Write_Control_Stream_LE+0x24>
 3f6:	21 11       	cpse	r18, r1
 3f8:	c4 cf       	rjmp	.-120    	; 0x382 <Endpoint_Write_Control_Stream_LE+0x2a>
 3fa:	d3 cf       	rjmp	.-90     	; 0x3a2 <Endpoint_Write_Control_Stream_LE+0x4a>
 3fc:	80 91 30 01 	lds	r24, 0x0130
 400:	88 23       	and	r24, r24
 402:	39 f0       	breq	.+14     	; 0x412 <Endpoint_Write_Control_Stream_LE+0xba>
 404:	85 30       	cpi	r24, 0x05	; 5
 406:	39 f0       	breq	.+14     	; 0x416 <Endpoint_Write_Control_Stream_LE+0xbe>
 408:	80 91 e8 00 	lds	r24, 0x00E8
 40c:	83 ff       	sbrs	r24, 3
 40e:	c9 cf       	rjmp	.-110    	; 0x3a2 <Endpoint_Write_Control_Stream_LE+0x4a>
 410:	04 c0       	rjmp	.+8      	; 0x41a <Endpoint_Write_Control_Stream_LE+0xc2>
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	08 95       	ret
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	08 95       	ret
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret

0000041e <Endpoint_Read_Control_Stream_LE>:
 41e:	61 15       	cp	r22, r1
 420:	71 05       	cpc	r23, r1
 422:	29 f4       	brne	.+10     	; 0x42e <Endpoint_Read_Control_Stream_LE+0x10>
 424:	20 91 e8 00 	lds	r18, 0x00E8
 428:	2b 77       	andi	r18, 0x7B	; 123
 42a:	20 93 e8 00 	sts	0x00E8, r18
 42e:	61 15       	cp	r22, r1
 430:	71 05       	cpc	r23, r1
 432:	11 f1       	breq	.+68     	; 0x478 <Endpoint_Read_Control_Stream_LE+0x5a>
 434:	20 91 30 01 	lds	r18, 0x0130
 438:	22 23       	and	r18, r18
 43a:	39 f1       	breq	.+78     	; 0x48a <Endpoint_Read_Control_Stream_LE+0x6c>
 43c:	25 30       	cpi	r18, 0x05	; 5
 43e:	39 f1       	breq	.+78     	; 0x48e <Endpoint_Read_Control_Stream_LE+0x70>
 440:	20 91 e8 00 	lds	r18, 0x00E8
 444:	23 fd       	sbrc	r18, 3
 446:	1d c0       	rjmp	.+58     	; 0x482 <Endpoint_Read_Control_Stream_LE+0x64>
 448:	20 91 e8 00 	lds	r18, 0x00E8
 44c:	22 ff       	sbrs	r18, 2
 44e:	f2 cf       	rjmp	.-28     	; 0x434 <Endpoint_Read_Control_Stream_LE+0x16>
 450:	fc 01       	movw	r30, r24
 452:	cf 01       	movw	r24, r30
 454:	20 91 f2 00 	lds	r18, 0x00F2
 458:	22 23       	and	r18, r18
 45a:	21 f3       	breq	.-56     	; 0x424 <Endpoint_Read_Control_Stream_LE+0x6>
 45c:	80 91 f1 00 	lds	r24, 0x00F1
 460:	81 93       	st	Z+, r24
 462:	cf 01       	movw	r24, r30
 464:	61 50       	subi	r22, 0x01	; 1
 466:	71 09       	sbc	r23, r1
 468:	a1 f7       	brne	.-24     	; 0x452 <Endpoint_Read_Control_Stream_LE+0x34>
 46a:	dc cf       	rjmp	.-72     	; 0x424 <Endpoint_Read_Control_Stream_LE+0x6>
 46c:	80 91 30 01 	lds	r24, 0x0130
 470:	88 23       	and	r24, r24
 472:	59 f0       	breq	.+22     	; 0x48a <Endpoint_Read_Control_Stream_LE+0x6c>
 474:	85 30       	cpi	r24, 0x05	; 5
 476:	59 f0       	breq	.+22     	; 0x48e <Endpoint_Read_Control_Stream_LE+0x70>
 478:	80 91 e8 00 	lds	r24, 0x00E8
 47c:	80 ff       	sbrs	r24, 0
 47e:	f6 cf       	rjmp	.-20     	; 0x46c <Endpoint_Read_Control_Stream_LE+0x4e>
 480:	02 c0       	rjmp	.+4      	; 0x486 <Endpoint_Read_Control_Stream_LE+0x68>
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	08 95       	ret
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	08 95       	ret
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	08 95       	ret

00000492 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 492:	20 91 37 01 	lds	r18, 0x0137
 496:	30 91 38 01 	lds	r19, 0x0138
 49a:	26 17       	cp	r18, r22
 49c:	37 07       	cpc	r19, r23
 49e:	48 f0       	brcs	.+18     	; 0x4b2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 4a0:	61 15       	cp	r22, r1
 4a2:	71 05       	cpc	r23, r1
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4a6:	20 91 e8 00 	lds	r18, 0x00E8
 4aa:	2e 77       	andi	r18, 0x7E	; 126
 4ac:	20 93 e8 00 	sts	0x00E8, r18
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <Endpoint_Write_Control_PStream_LE+0x22>
 4b2:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4b4:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4b6:	61 15       	cp	r22, r1
 4b8:	71 05       	cpc	r23, r1
 4ba:	d9 f1       	breq	.+118    	; 0x532 <__stack+0x33>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4bc:	30 91 30 01 	lds	r19, 0x0130

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4c0:	33 23       	and	r19, r19
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <Endpoint_Write_Control_PStream_LE+0x34>
 4c4:	44 c0       	rjmp	.+136    	; 0x54e <__stack+0x4f>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4c6:	35 30       	cpi	r19, 0x05	; 5
 4c8:	09 f4       	brne	.+2      	; 0x4cc <Endpoint_Write_Control_PStream_LE+0x3a>
 4ca:	43 c0       	rjmp	.+134    	; 0x552 <__stack+0x53>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4cc:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4d0:	33 fd       	sbrc	r19, 3
 4d2:	41 c0       	rjmp	.+130    	; 0x556 <__stack+0x57>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4d4:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 4d8:	32 ff       	sbrs	r19, 2
 4da:	06 c0       	rjmp	.+12     	; 0x4e8 <Endpoint_Write_Control_PStream_LE+0x56>
 4dc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 4e0:	82 ff       	sbrs	r24, 2
 4e2:	2a c0       	rjmp	.+84     	; 0x538 <__stack+0x39>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4e8:	30 91 e8 00 	lds	r19, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
 4ec:	30 ff       	sbrs	r19, 0
 4ee:	e3 cf       	rjmp	.-58     	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x24>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 4f0:	20 91 f2 00 	lds	r18, 0x00F2
 4f4:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4f6:	fc 01       	movw	r30, r24
 4f8:	28 1b       	sub	r18, r24
 4fa:	39 0b       	sbc	r19, r25
 4fc:	c9 01       	movw	r24, r18
 4fe:	8e 0f       	add	r24, r30
 500:	9f 1f       	adc	r25, r31
 502:	61 15       	cp	r22, r1
 504:	71 05       	cpc	r23, r1
 506:	51 f0       	breq	.+20     	; 0x51c <__stack+0x1d>
 508:	88 30       	cpi	r24, 0x08	; 8
 50a:	91 05       	cpc	r25, r1
 50c:	38 f4       	brcc	.+14     	; 0x51c <__stack+0x1d>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 50e:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 510:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 514:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 516:	61 50       	subi	r22, 0x01	; 1
 518:	71 09       	sbc	r23, r1
 51a:	f0 cf       	rjmp	.-32     	; 0x4fc <Endpoint_Write_Control_PStream_LE+0x6a>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	08 97       	sbiw	r24, 0x08	; 8
 520:	09 f0       	breq	.+2      	; 0x524 <__stack+0x25>
 522:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 524:	80 91 e8 00 	lds	r24, 0x00E8
 528:	8e 77       	andi	r24, 0x7E	; 126
 52a:	80 93 e8 00 	sts	0x00E8, r24
 52e:	cf 01       	movw	r24, r30
 530:	c2 cf       	rjmp	.-124    	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 532:	21 11       	cpse	r18, r1
 534:	c3 cf       	rjmp	.-122    	; 0x4bc <Endpoint_Write_Control_PStream_LE+0x2a>
 536:	d2 cf       	rjmp	.-92     	; 0x4dc <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 538:	80 91 30 01 	lds	r24, 0x0130

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 53c:	88 23       	and	r24, r24
 53e:	39 f0       	breq	.+14     	; 0x54e <__stack+0x4f>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 540:	85 30       	cpi	r24, 0x05	; 5
 542:	39 f0       	breq	.+14     	; 0x552 <__stack+0x53>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 544:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 548:	83 ff       	sbrs	r24, 3
 54a:	c8 cf       	rjmp	.-112    	; 0x4dc <Endpoint_Write_Control_PStream_LE+0x4a>
 54c:	04 c0       	rjmp	.+8      	; 0x556 <__stack+0x57>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 556:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 558:	08 95       	ret

0000055a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 55a:	98 2f       	mov	r25, r24
 55c:	95 30       	cpi	r25, 0x05	; 5
 55e:	58 f5       	brcc	.+86     	; 0x5b6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 560:	90 93 e9 00 	sts	0x00E9, r25
 564:	98 17       	cp	r25, r24
 566:	39 f0       	breq	.+14     	; 0x576 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 568:	70 91 ec 00 	lds	r23, 0x00EC
 56c:	20 91 ed 00 	lds	r18, 0x00ED
 570:	50 91 f0 00 	lds	r21, 0x00F0
 574:	03 c0       	rjmp	.+6      	; 0x57c <Endpoint_ConfigureEndpoint_Prv+0x22>
 576:	24 2f       	mov	r18, r20
 578:	76 2f       	mov	r23, r22
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	21 ff       	sbrs	r18, 1
 57e:	19 c0       	rjmp	.+50     	; 0x5b2 <Endpoint_ConfigureEndpoint_Prv+0x58>
 580:	30 91 eb 00 	lds	r19, 0x00EB
 584:	3e 7f       	andi	r19, 0xFE	; 254
 586:	30 93 eb 00 	sts	0x00EB, r19
 58a:	30 91 ed 00 	lds	r19, 0x00ED
 58e:	3d 7f       	andi	r19, 0xFD	; 253
 590:	30 93 ed 00 	sts	0x00ED, r19
 594:	30 91 eb 00 	lds	r19, 0x00EB
 598:	31 60       	ori	r19, 0x01	; 1
 59a:	30 93 eb 00 	sts	0x00EB, r19
 59e:	70 93 ec 00 	sts	0x00EC, r23
 5a2:	20 93 ed 00 	sts	0x00ED, r18
 5a6:	50 93 f0 00 	sts	0x00F0, r21
 5aa:	20 91 ee 00 	lds	r18, 0x00EE
 5ae:	27 ff       	sbrs	r18, 7
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <Endpoint_ConfigureEndpoint_Prv+0x66>
 5b2:	9f 5f       	subi	r25, 0xFF	; 255
 5b4:	d3 cf       	rjmp	.-90     	; 0x55c <Endpoint_ConfigureEndpoint_Prv+0x2>
 5b6:	8f 70       	andi	r24, 0x0F	; 15
 5b8:	80 93 e9 00 	sts	0x00E9, r24
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	08 95       	ret
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <Endpoint_ConfigureEndpointTable>:
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	06 2f       	mov	r16, r22
 5ce:	ec 01       	movw	r28, r24
 5d0:	10 e0       	ldi	r17, 0x00	; 0
 5d2:	10 17       	cp	r17, r16
 5d4:	69 f1       	breq	.+90     	; 0x630 <Endpoint_ConfigureEndpointTable+0x6c>
 5d6:	98 81       	ld	r25, Y
 5d8:	99 23       	and	r25, r25
 5da:	39 f1       	breq	.+78     	; 0x62a <Endpoint_ConfigureEndpointTable+0x66>
 5dc:	2c 81       	ldd	r18, Y+4	; 0x04
 5de:	e9 81       	ldd	r30, Y+1	; 0x01
 5e0:	fa 81       	ldd	r31, Y+2	; 0x02
 5e2:	6b 81       	ldd	r22, Y+3	; 0x03
 5e4:	89 2f       	mov	r24, r25
 5e6:	8f 70       	andi	r24, 0x0F	; 15
 5e8:	85 30       	cpi	r24, 0x05	; 5
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <Endpoint_ConfigureEndpointTable+0x2c>
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	21 c0       	rjmp	.+66     	; 0x632 <Endpoint_ConfigureEndpointTable+0x6e>
 5f0:	22 30       	cpi	r18, 0x02	; 2
 5f2:	10 f0       	brcs	.+4      	; 0x5f8 <Endpoint_ConfigureEndpointTable+0x34>
 5f4:	56 e0       	ldi	r21, 0x06	; 6
 5f6:	01 c0       	rjmp	.+2      	; 0x5fa <Endpoint_ConfigureEndpointTable+0x36>
 5f8:	52 e0       	ldi	r21, 0x02	; 2
 5fa:	28 e0       	ldi	r18, 0x08	; 8
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	40 e0       	ldi	r20, 0x00	; 0
 600:	2e 17       	cp	r18, r30
 602:	3f 07       	cpc	r19, r31
 604:	20 f4       	brcc	.+8      	; 0x60e <Endpoint_ConfigureEndpointTable+0x4a>
 606:	4f 5f       	subi	r20, 0xFF	; 255
 608:	22 0f       	add	r18, r18
 60a:	33 1f       	adc	r19, r19
 60c:	f9 cf       	rjmp	.-14     	; 0x600 <Endpoint_ConfigureEndpointTable+0x3c>
 60e:	42 95       	swap	r20
 610:	40 7f       	andi	r20, 0xF0	; 240
 612:	45 2b       	or	r20, r21
 614:	99 1f       	adc	r25, r25
 616:	99 27       	eor	r25, r25
 618:	99 1f       	adc	r25, r25
 61a:	62 95       	swap	r22
 61c:	66 0f       	add	r22, r22
 61e:	66 0f       	add	r22, r22
 620:	60 7c       	andi	r22, 0xC0	; 192
 622:	69 2b       	or	r22, r25
 624:	9a df       	rcall	.-204    	; 0x55a <Endpoint_ConfigureEndpoint_Prv>
 626:	88 23       	and	r24, r24
 628:	09 f3       	breq	.-62     	; 0x5ec <Endpoint_ConfigureEndpointTable+0x28>
 62a:	1f 5f       	subi	r17, 0xFF	; 255
 62c:	25 96       	adiw	r28, 0x05	; 5
 62e:	d1 cf       	rjmp	.-94     	; 0x5d2 <Endpoint_ConfigureEndpointTable+0xe>
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 63c:	80 91 31 01 	lds	r24, 0x0131
 640:	87 fd       	sbrc	r24, 7
 642:	05 c0       	rjmp	.+10     	; 0x64e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 644:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 648:	80 ff       	sbrs	r24, 0
 64a:	0e c0       	rjmp	.+28     	; 0x668 <Endpoint_ClearStatusStage+0x2c>
 64c:	12 c0       	rjmp	.+36     	; 0x672 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 64e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 652:	82 fd       	sbrc	r24, 2
 654:	05 c0       	rjmp	.+10     	; 0x660 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 656:	80 91 30 01 	lds	r24, 0x0130
 65a:	81 11       	cpse	r24, r1
 65c:	f8 cf       	rjmp	.-16     	; 0x64e <Endpoint_ClearStatusStage+0x12>
 65e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 660:	80 91 e8 00 	lds	r24, 0x00E8
 664:	8b 77       	andi	r24, 0x7B	; 123
 666:	08 c0       	rjmp	.+16     	; 0x678 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 668:	80 91 30 01 	lds	r24, 0x0130
 66c:	81 11       	cpse	r24, r1
 66e:	ea cf       	rjmp	.-44     	; 0x644 <Endpoint_ClearStatusStage+0x8>
 670:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 672:	80 91 e8 00 	lds	r24, 0x00E8
 676:	8e 77       	andi	r24, 0x7E	; 126
 678:	80 93 e8 00 	sts	0x00E8, r24
 67c:	08 95       	ret

0000067e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 67e:	80 91 e4 00 	lds	r24, 0x00E4
 682:	90 91 e5 00 	lds	r25, 0x00E5
 686:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 688:	20 91 ec 00 	lds	r18, 0x00EC
 68c:	20 ff       	sbrs	r18, 0
 68e:	21 c0       	rjmp	.+66     	; 0x6d2 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 690:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 694:	20 fd       	sbrc	r18, 0
 696:	21 c0       	rjmp	.+66     	; 0x6da <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 698:	20 91 30 01 	lds	r18, 0x0130

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 69c:	22 23       	and	r18, r18
 69e:	89 f0       	breq	.+34     	; 0x6c2 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6a0:	25 30       	cpi	r18, 0x05	; 5
 6a2:	89 f0       	breq	.+34     	; 0x6c6 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 6a4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 6a8:	25 fd       	sbrc	r18, 5
 6aa:	0f c0       	rjmp	.+30     	; 0x6ca <Endpoint_WaitUntilReady+0x4c>
 6ac:	20 91 e4 00 	lds	r18, 0x00E4
 6b0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 6b4:	28 17       	cp	r18, r24
 6b6:	39 07       	cpc	r19, r25
 6b8:	39 f3       	breq	.-50     	; 0x688 <Endpoint_WaitUntilReady+0xa>
 6ba:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 6bc:	41 f0       	breq	.+16     	; 0x6ce <Endpoint_WaitUntilReady+0x50>
 6be:	c9 01       	movw	r24, r18
 6c0:	e3 cf       	rjmp	.-58     	; 0x688 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 6c2:	82 e0       	ldi	r24, 0x02	; 2
 6c4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 6ce:	84 e0       	ldi	r24, 0x04	; 4
 6d0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6d2:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 6d6:	22 ff       	sbrs	r18, 2
 6d8:	df cf       	rjmp	.-66     	; 0x698 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	08 95       	ret

000006de <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6de:	41 d0       	rcall	.+130    	; 0x762 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6e0:	43 d0       	rcall	.+134    	; 0x768 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 6e2:	80 91 d8 00 	lds	r24, 0x00D8
 6e6:	8f 77       	andi	r24, 0x7F	; 127
 6e8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 6ec:	80 91 d8 00 	lds	r24, 0x00D8
 6f0:	80 68       	ori	r24, 0x80	; 128
 6f2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6f6:	80 91 d8 00 	lds	r24, 0x00D8
 6fa:	8f 7d       	andi	r24, 0xDF	; 223
 6fc:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 700:	84 e0       	ldi	r24, 0x04	; 4
 702:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 704:	86 e0       	ldi	r24, 0x06	; 6
 706:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 708:	09 b4       	in	r0, 0x29	; 41
 70a:	00 fe       	sbrs	r0, 0
 70c:	fd cf       	rjmp	.-6      	; 0x708 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 70e:	10 92 30 01 	sts	0x0130, r1
	USB_Device_ConfigurationNumber  = 0;
 712:	10 92 2c 01 	sts	0x012C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 716:	10 92 2e 01 	sts	0x012E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 71a:	10 92 2d 01 	sts	0x012D, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 71e:	42 e0       	ldi	r20, 0x02	; 2
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	1a df       	rcall	.-460    	; 0x55a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 726:	80 91 e1 00 	lds	r24, 0x00E1
 72a:	8e 7f       	andi	r24, 0xFE	; 254
 72c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 730:	80 91 e2 00 	lds	r24, 0x00E2
 734:	81 60       	ori	r24, 0x01	; 1
 736:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 73a:	80 91 e2 00 	lds	r24, 0x00E2
 73e:	88 60       	ori	r24, 0x08	; 8
 740:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 744:	80 91 e0 00 	lds	r24, 0x00E0
 748:	8e 7f       	andi	r24, 0xFE	; 254
 74a:	80 93 e0 00 	sts	0x00E0, r24
 74e:	08 95       	ret

00000750 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 750:	e3 e6       	ldi	r30, 0x63	; 99
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	8e 7f       	andi	r24, 0xFE	; 254
 758:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	80 93 2f 01 	sts	0x012F, r24

	USB_ResetInterface();
 760:	be cf       	rjmp	.-132    	; 0x6de <USB_ResetInterface>

00000762 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 762:	10 92 e2 00 	sts	0x00E2, r1
 766:	08 95       	ret

00000768 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 768:	10 92 e1 00 	sts	0x00E1, r1
 76c:	08 95       	ret

0000076e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 76e:	1f 92       	push	r1
 770:	0f 92       	push	r0
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	0f 92       	push	r0
 776:	11 24       	eor	r1, r1
 778:	2f 93       	push	r18
 77a:	3f 93       	push	r19
 77c:	4f 93       	push	r20
 77e:	5f 93       	push	r21
 780:	6f 93       	push	r22
 782:	7f 93       	push	r23
 784:	8f 93       	push	r24
 786:	9f 93       	push	r25
 788:	af 93       	push	r26
 78a:	bf 93       	push	r27
 78c:	ef 93       	push	r30
 78e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 790:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 794:	82 ff       	sbrs	r24, 2
 796:	0a c0       	rjmp	.+20     	; 0x7ac <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 798:	80 91 e2 00 	lds	r24, 0x00E2
 79c:	82 ff       	sbrs	r24, 2
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 7a0:	80 91 e1 00 	lds	r24, 0x00E1
 7a4:	8b 7f       	andi	r24, 0xFB	; 251
 7a6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 7aa:	d7 dc       	rcall	.-1618   	; 0x15a <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7ac:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7b0:	80 ff       	sbrs	r24, 0
 7b2:	17 c0       	rjmp	.+46     	; 0x7e2 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7b4:	80 91 e2 00 	lds	r24, 0x00E2
 7b8:	80 ff       	sbrs	r24, 0
 7ba:	13 c0       	rjmp	.+38     	; 0x7e2 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7bc:	80 91 e2 00 	lds	r24, 0x00E2
 7c0:	8e 7f       	andi	r24, 0xFE	; 254
 7c2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7c6:	80 91 e2 00 	lds	r24, 0x00E2
 7ca:	80 61       	ori	r24, 0x10	; 16
 7cc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 7d0:	80 91 d8 00 	lds	r24, 0x00D8
 7d4:	80 62       	ori	r24, 0x20	; 32
 7d6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 7da:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 7dc:	10 92 30 01 	sts	0x0130, r1
		EVENT_USB_Device_Disconnect();
 7e0:	af dc       	rcall	.-1698   	; 0x140 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 7e2:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 7e6:	84 ff       	sbrs	r24, 4
 7e8:	2f c0       	rjmp	.+94     	; 0x848 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 7ea:	80 91 e2 00 	lds	r24, 0x00E2
 7ee:	84 ff       	sbrs	r24, 4
 7f0:	2b c0       	rjmp	.+86     	; 0x848 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7f6:	86 e0       	ldi	r24, 0x06	; 6
 7f8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7fa:	09 b4       	in	r0, 0x29	; 41
 7fc:	00 fe       	sbrs	r0, 0
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 800:	80 91 d8 00 	lds	r24, 0x00D8
 804:	8f 7d       	andi	r24, 0xDF	; 223
 806:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 80a:	80 91 e1 00 	lds	r24, 0x00E1
 80e:	8f 7e       	andi	r24, 0xEF	; 239
 810:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 814:	80 91 e2 00 	lds	r24, 0x00E2
 818:	8f 7e       	andi	r24, 0xEF	; 239
 81a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 81e:	80 91 e2 00 	lds	r24, 0x00E2
 822:	81 60       	ori	r24, 0x01	; 1
 824:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 828:	80 91 2c 01 	lds	r24, 0x012C
 82c:	88 23       	and	r24, r24
 82e:	11 f0       	breq	.+4      	; 0x834 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 830:	84 e0       	ldi	r24, 0x04	; 4
 832:	07 c0       	rjmp	.+14     	; 0x842 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 834:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 838:	87 ff       	sbrs	r24, 7
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__vector_11+0xd2>
 83c:	83 e0       	ldi	r24, 0x03	; 3
 83e:	01 c0       	rjmp	.+2      	; 0x842 <__vector_11+0xd4>
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	80 93 30 01 	sts	0x0130, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 846:	7b dc       	rcall	.-1802   	; 0x13e <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 848:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 84c:	83 ff       	sbrs	r24, 3
 84e:	22 c0       	rjmp	.+68     	; 0x894 <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 850:	80 91 e2 00 	lds	r24, 0x00E2
 854:	83 ff       	sbrs	r24, 3
 856:	1e c0       	rjmp	.+60     	; 0x894 <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 858:	80 91 e1 00 	lds	r24, 0x00E1
 85c:	87 7f       	andi	r24, 0xF7	; 247
 85e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	80 93 30 01 	sts	0x0130, r24
		USB_Device_ConfigurationNumber = 0;
 868:	10 92 2c 01 	sts	0x012C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 86c:	80 91 e1 00 	lds	r24, 0x00E1
 870:	8e 7f       	andi	r24, 0xFE	; 254
 872:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 876:	80 91 e2 00 	lds	r24, 0x00E2
 87a:	8e 7f       	andi	r24, 0xFE	; 254
 87c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 880:	80 91 e2 00 	lds	r24, 0x00E2
 884:	80 61       	ori	r24, 0x10	; 16
 886:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 88a:	42 e0       	ldi	r20, 0x02	; 2
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	64 de       	rcall	.-824    	; 0x55a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 892:	62 d1       	rcall	.+708    	; 0xb58 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 894:	ff 91       	pop	r31
 896:	ef 91       	pop	r30
 898:	bf 91       	pop	r27
 89a:	af 91       	pop	r26
 89c:	9f 91       	pop	r25
 89e:	8f 91       	pop	r24
 8a0:	7f 91       	pop	r23
 8a2:	6f 91       	pop	r22
 8a4:	5f 91       	pop	r21
 8a6:	4f 91       	pop	r20
 8a8:	3f 91       	pop	r19
 8aa:	2f 91       	pop	r18
 8ac:	0f 90       	pop	r0
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	0f 90       	pop	r0
 8b2:	1f 90       	pop	r1
 8b4:	18 95       	reti

000008b6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	aa 97       	sbiw	r28, 0x2a	; 42
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	e1 e3       	ldi	r30, 0x31	; 49
 8ce:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8d0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 8d4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8d6:	21 e0       	ldi	r18, 0x01	; 1
 8d8:	e9 33       	cpi	r30, 0x39	; 57
 8da:	f2 07       	cpc	r31, r18
 8dc:	c9 f7       	brne	.-14     	; 0x8d0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 8de:	3a dc       	rcall	.-1932   	; 0x154 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8e0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 8e4:	83 ff       	sbrs	r24, 3
 8e6:	20 c1       	rjmp	.+576    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8e8:	90 91 31 01 	lds	r25, 0x0131

		switch (USB_ControlRequest.bRequest)
 8ec:	80 91 32 01 	lds	r24, 0x0132
 8f0:	85 30       	cpi	r24, 0x05	; 5
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <USB_Device_ProcessControlRequest+0x40>
 8f4:	77 c0       	rjmp	.+238    	; 0x9e4 <USB_Device_ProcessControlRequest+0x12e>
 8f6:	30 f4       	brcc	.+12     	; 0x904 <USB_Device_ProcessControlRequest+0x4e>
 8f8:	81 30       	cpi	r24, 0x01	; 1
 8fa:	81 f1       	breq	.+96     	; 0x95c <USB_Device_ProcessControlRequest+0xa6>
 8fc:	68 f0       	brcs	.+26     	; 0x918 <USB_Device_ProcessControlRequest+0x62>
 8fe:	83 30       	cpi	r24, 0x03	; 3
 900:	69 f1       	breq	.+90     	; 0x95c <USB_Device_ProcessControlRequest+0xa6>
 902:	12 c1       	rjmp	.+548    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
 904:	88 30       	cpi	r24, 0x08	; 8
 906:	09 f4       	brne	.+2      	; 0x90a <USB_Device_ProcessControlRequest+0x54>
 908:	e1 c0       	rjmp	.+450    	; 0xacc <USB_Device_ProcessControlRequest+0x216>
 90a:	89 30       	cpi	r24, 0x09	; 9
 90c:	09 f4       	brne	.+2      	; 0x910 <USB_Device_ProcessControlRequest+0x5a>
 90e:	f0 c0       	rjmp	.+480    	; 0xaf0 <USB_Device_ProcessControlRequest+0x23a>
 910:	86 30       	cpi	r24, 0x06	; 6
 912:	09 f0       	breq	.+2      	; 0x916 <USB_Device_ProcessControlRequest+0x60>
 914:	09 c1       	rjmp	.+530    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
 916:	88 c0       	rjmp	.+272    	; 0xa28 <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 918:	90 38       	cpi	r25, 0x80	; 128
 91a:	81 f0       	breq	.+32     	; 0x93c <USB_Device_ProcessControlRequest+0x86>
 91c:	92 38       	cpi	r25, 0x82	; 130
 91e:	09 f0       	breq	.+2      	; 0x922 <USB_Device_ProcessControlRequest+0x6c>
 920:	03 c1       	rjmp	.+518    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 922:	80 91 35 01 	lds	r24, 0x0135
 926:	8f 70       	andi	r24, 0x0F	; 15
 928:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 92c:	80 91 eb 00 	lds	r24, 0x00EB
 930:	85 fb       	bst	r24, 5
 932:	88 27       	eor	r24, r24
 934:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 936:	10 92 e9 00 	sts	0x00E9, r1
 93a:	06 c0       	rjmp	.+12     	; 0x948 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 93c:	80 91 2d 01 	lds	r24, 0x012D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 940:	90 91 2e 01 	lds	r25, 0x012E
 944:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 946:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 948:	90 91 e8 00 	lds	r25, 0x00E8
 94c:	97 7f       	andi	r25, 0xF7	; 247
 94e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 952:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 956:	10 92 f1 00 	sts	0x00F1, r1
 95a:	c3 c0       	rjmp	.+390    	; 0xae2 <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 95c:	29 2f       	mov	r18, r25
 95e:	2d 7f       	andi	r18, 0xFD	; 253
 960:	09 f0       	breq	.+2      	; 0x964 <USB_Device_ProcessControlRequest+0xae>
 962:	e2 c0       	rjmp	.+452    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 964:	99 23       	and	r25, r25
 966:	19 f0       	breq	.+6      	; 0x96e <USB_Device_ProcessControlRequest+0xb8>
 968:	92 30       	cpi	r25, 0x02	; 2
 96a:	61 f0       	breq	.+24     	; 0x984 <USB_Device_ProcessControlRequest+0xce>
 96c:	dd c0       	rjmp	.+442    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 96e:	90 91 33 01 	lds	r25, 0x0133
 972:	91 30       	cpi	r25, 0x01	; 1
 974:	09 f0       	breq	.+2      	; 0x978 <USB_Device_ProcessControlRequest+0xc2>
 976:	d8 c0       	rjmp	.+432    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 978:	83 30       	cpi	r24, 0x03	; 3
 97a:	09 f0       	breq	.+2      	; 0x97e <USB_Device_ProcessControlRequest+0xc8>
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	90 93 2e 01 	sts	0x012E, r25
 982:	2a c0       	rjmp	.+84     	; 0x9d8 <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 984:	90 91 33 01 	lds	r25, 0x0133
 988:	91 11       	cpse	r25, r1
 98a:	26 c0       	rjmp	.+76     	; 0x9d8 <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 98c:	20 91 35 01 	lds	r18, 0x0135
 990:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 992:	09 f4       	brne	.+2      	; 0x996 <USB_Device_ProcessControlRequest+0xe0>
 994:	c9 c0       	rjmp	.+402    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 996:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 99a:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 99e:	90 ff       	sbrs	r25, 0
 9a0:	1b c0       	rjmp	.+54     	; 0x9d8 <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9a2:	83 30       	cpi	r24, 0x03	; 3
 9a4:	21 f4       	brne	.+8      	; 0x9ae <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9a6:	80 91 eb 00 	lds	r24, 0x00EB
 9aa:	80 62       	ori	r24, 0x20	; 32
 9ac:	13 c0       	rjmp	.+38     	; 0x9d4 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9ae:	80 91 eb 00 	lds	r24, 0x00EB
 9b2:	80 61       	ori	r24, 0x10	; 16
 9b4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	02 2e       	mov	r0, r18
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <USB_Device_ProcessControlRequest+0x10c>
 9c0:	88 0f       	add	r24, r24
 9c2:	0a 94       	dec	r0
 9c4:	ea f7       	brpl	.-6      	; 0x9c0 <USB_Device_ProcessControlRequest+0x10a>
 9c6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 9ca:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9ce:	80 91 eb 00 	lds	r24, 0x00EB
 9d2:	88 60       	ori	r24, 0x08	; 8
 9d4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9d8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9dc:	80 91 e8 00 	lds	r24, 0x00E8
 9e0:	87 7f       	andi	r24, 0xF7	; 247
 9e2:	82 c0       	rjmp	.+260    	; 0xae8 <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9e4:	91 11       	cpse	r25, r1
 9e6:	a0 c0       	rjmp	.+320    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9e8:	10 91 33 01 	lds	r17, 0x0133
 9ec:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 9ee:	80 91 e3 00 	lds	r24, 0x00E3
 9f2:	80 78       	andi	r24, 0x80	; 128
 9f4:	81 2b       	or	r24, r17
 9f6:	80 93 e3 00 	sts	0x00E3, r24
 9fa:	80 91 e8 00 	lds	r24, 0x00E8
 9fe:	87 7f       	andi	r24, 0xF7	; 247
 a00:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a04:	1b de       	rcall	.-970    	; 0x63c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a06:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 a0a:	80 ff       	sbrs	r24, 0
 a0c:	fc cf       	rjmp	.-8      	; 0xa06 <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 a0e:	80 91 e3 00 	lds	r24, 0x00E3
 a12:	80 68       	ori	r24, 0x80	; 128
 a14:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a18:	11 23       	and	r17, r17
 a1a:	11 f0       	breq	.+4      	; 0xa20 <USB_Device_ProcessControlRequest+0x16a>
 a1c:	83 e0       	ldi	r24, 0x03	; 3
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <USB_Device_ProcessControlRequest+0x16c>
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	80 93 30 01 	sts	0x0130, r24
 a26:	80 c0       	rjmp	.+256    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a28:	90 58       	subi	r25, 0x80	; 128
 a2a:	92 30       	cpi	r25, 0x02	; 2
 a2c:	08 f0       	brcs	.+2      	; 0xa30 <USB_Device_ProcessControlRequest+0x17a>
 a2e:	7c c0       	rjmp	.+248    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a30:	80 91 33 01 	lds	r24, 0x0133
 a34:	90 91 34 01 	lds	r25, 0x0134
 a38:	8c 3d       	cpi	r24, 0xDC	; 220
 a3a:	23 e0       	ldi	r18, 0x03	; 3
 a3c:	92 07       	cpc	r25, r18
 a3e:	71 f5       	brne	.+92     	; 0xa9c <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a40:	83 e0       	ldi	r24, 0x03	; 3
 a42:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a44:	8a e2       	ldi	r24, 0x2A	; 42
 a46:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a48:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a4a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a4c:	de 01       	movw	r26, r28
 a4e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a50:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a52:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a54:	51 e2       	ldi	r21, 0x21	; 33
 a56:	e3 2f       	mov	r30, r19
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	50 93 57 00 	sts	0x0057, r21
 a5e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 a60:	20 ff       	sbrs	r18, 0
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
 a64:	e2 95       	swap	r30
 a66:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a68:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 a6a:	ef 70       	andi	r30, 0x0F	; 15
 a6c:	8e 2f       	mov	r24, r30
 a6e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a70:	ea 30       	cpi	r30, 0x0A	; 10
 a72:	10 f0       	brcs	.+4      	; 0xa78 <USB_Device_ProcessControlRequest+0x1c2>
 a74:	c7 96       	adiw	r24, 0x37	; 55
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x1c4>
 a78:	c0 96       	adiw	r24, 0x30	; 48
 a7a:	8d 93       	st	X+, r24
 a7c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a7e:	2f 5f       	subi	r18, 0xFF	; 255
 a80:	24 31       	cpi	r18, 0x14	; 20
 a82:	49 f7       	brne	.-46     	; 0xa56 <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 a84:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a86:	80 91 e8 00 	lds	r24, 0x00E8
 a8a:	87 7f       	andi	r24, 0xF7	; 247
 a8c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a90:	6a e2       	ldi	r22, 0x2A	; 42
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	ce 01       	movw	r24, r28
 a96:	01 96       	adiw	r24, 0x01	; 1
 a98:	5f dc       	rcall	.-1858   	; 0x358 <Endpoint_Write_Control_Stream_LE>
 a9a:	12 c0       	rjmp	.+36     	; 0xac0 <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a9c:	ae 01       	movw	r20, r28
 a9e:	4f 5f       	subi	r20, 0xFF	; 255
 aa0:	5f 4f       	sbci	r21, 0xFF	; 255
 aa2:	60 91 35 01 	lds	r22, 0x0135
 aa6:	cd db       	rcall	.-2150   	; 0x242 <CALLBACK_USB_GetDescriptor>
 aa8:	00 97       	sbiw	r24, 0x00	; 0
 aaa:	09 f4       	brne	.+2      	; 0xaae <USB_Device_ProcessControlRequest+0x1f8>
 aac:	3d c0       	rjmp	.+122    	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
 aae:	20 91 e8 00 	lds	r18, 0x00E8
 ab2:	27 7f       	andi	r18, 0xF7	; 247
 ab4:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ab8:	bc 01       	movw	r22, r24
 aba:	89 81       	ldd	r24, Y+1	; 0x01
 abc:	9a 81       	ldd	r25, Y+2	; 0x02
 abe:	e9 dc       	rcall	.-1582   	; 0x492 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ac0:	80 91 e8 00 	lds	r24, 0x00E8
 ac4:	8b 77       	andi	r24, 0x7B	; 123
 ac6:	80 93 e8 00 	sts	0x00E8, r24
 aca:	2e c0       	rjmp	.+92     	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 acc:	90 38       	cpi	r25, 0x80	; 128
 ace:	61 f5       	brne	.+88     	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad0:	80 91 e8 00 	lds	r24, 0x00E8
 ad4:	87 7f       	andi	r24, 0xF7	; 247
 ad6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ada:	80 91 2c 01 	lds	r24, 0x012C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ade:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ae2:	80 91 e8 00 	lds	r24, 0x00E8
 ae6:	8e 77       	andi	r24, 0x7E	; 126
 ae8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 aec:	a7 dd       	rcall	.-1202   	; 0x63c <Endpoint_ClearStatusStage>
 aee:	1c c0       	rjmp	.+56     	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 af0:	91 11       	cpse	r25, r1
 af2:	1a c0       	rjmp	.+52     	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 af4:	90 91 33 01 	lds	r25, 0x0133
 af8:	92 30       	cpi	r25, 0x02	; 2
 afa:	b0 f4       	brcc	.+44     	; 0xb28 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 afc:	80 91 e8 00 	lds	r24, 0x00E8
 b00:	87 7f       	andi	r24, 0xF7	; 247
 b02:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b06:	90 93 2c 01 	sts	0x012C, r25

	Endpoint_ClearStatusStage();
 b0a:	98 dd       	rcall	.-1232   	; 0x63c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b0c:	80 91 2c 01 	lds	r24, 0x012C
 b10:	81 11       	cpse	r24, r1
 b12:	04 c0       	rjmp	.+8      	; 0xb1c <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b14:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b18:	87 ff       	sbrs	r24, 7
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <USB_Device_ProcessControlRequest+0x26a>
 b1c:	84 e0       	ldi	r24, 0x04	; 4
 b1e:	01 c0       	rjmp	.+2      	; 0xb22 <USB_Device_ProcessControlRequest+0x26c>
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	80 93 30 01 	sts	0x0130, r24

	EVENT_USB_Device_ConfigurationChanged();
 b26:	0d db       	rcall	.-2534   	; 0x142 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b28:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b2c:	83 ff       	sbrs	r24, 3
 b2e:	0a c0       	rjmp	.+20     	; 0xb44 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b30:	80 91 e8 00 	lds	r24, 0x00E8
 b34:	87 7f       	andi	r24, 0xF7	; 247
 b36:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b3a:	80 91 eb 00 	lds	r24, 0x00EB
 b3e:	80 62       	ori	r24, 0x20	; 32
 b40:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 b44:	aa 96       	adiw	r28, 0x2a	; 42
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	f8 94       	cli
 b4a:	de bf       	out	0x3e, r29	; 62
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	cd bf       	out	0x3d, r28	; 61
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	1f 91       	pop	r17
 b56:	08 95       	ret

00000b58 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 b58:	08 95       	ret

00000b5a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b5a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 b5c:	80 91 30 01 	lds	r24, 0x0130
 b60:	88 23       	and	r24, r24
 b62:	a9 f0       	breq	.+42     	; 0xb8e <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b64:	80 91 e9 00 	lds	r24, 0x00E9
 b68:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b6a:	90 91 ec 00 	lds	r25, 0x00EC
 b6e:	90 ff       	sbrs	r25, 0
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <USB_USBTask+0x1c>
 b72:	90 e8       	ldi	r25, 0x80	; 128
 b74:	01 c0       	rjmp	.+2      	; 0xb78 <USB_USBTask+0x1e>
 b76:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b78:	c9 2f       	mov	r28, r25
 b7a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b7c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b80:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 b84:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 b86:	97 de       	rcall	.-722    	; 0x8b6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b88:	cf 70       	andi	r28, 0x0F	; 15
 b8a:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 b8e:	cf 91       	pop	r28
 b90:	08 95       	ret

00000b92 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 b92:	6f 92       	push	r6
 b94:	7f 92       	push	r7
 b96:	8f 92       	push	r8
 b98:	9f 92       	push	r9
 b9a:	af 92       	push	r10
 b9c:	bf 92       	push	r11
 b9e:	cf 92       	push	r12
 ba0:	df 92       	push	r13
 ba2:	ef 92       	push	r14
 ba4:	ff 92       	push	r15
 ba6:	0f 93       	push	r16
 ba8:	1f 93       	push	r17
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	00 d0       	rcall	.+0      	; 0xbb0 <HID_Device_ProcessControlRequest+0x1e>
 bb0:	1f 92       	push	r1
 bb2:	cd b7       	in	r28, 0x3d	; 61
 bb4:	de b7       	in	r29, 0x3e	; 62
 bb6:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 bb8:	ad b6       	in	r10, 0x3d	; 61
 bba:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bbc:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 bc0:	83 ff       	sbrs	r24, 3
 bc2:	02 c1       	rjmp	.+516    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 bc4:	f7 01       	movw	r30, r14
 bc6:	80 81       	ld	r24, Z
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	20 91 35 01 	lds	r18, 0x0135
 bce:	30 91 36 01 	lds	r19, 0x0136
 bd2:	28 17       	cp	r18, r24
 bd4:	39 07       	cpc	r19, r25
 bd6:	09 f0       	breq	.+2      	; 0xbda <HID_Device_ProcessControlRequest+0x48>
 bd8:	f7 c0       	rjmp	.+494    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
 bda:	80 91 32 01 	lds	r24, 0x0132
 bde:	83 30       	cpi	r24, 0x03	; 3
 be0:	09 f4       	brne	.+2      	; 0xbe4 <HID_Device_ProcessControlRequest+0x52>
 be2:	99 c0       	rjmp	.+306    	; 0xd16 <HID_Device_ProcessControlRequest+0x184>
 be4:	30 f4       	brcc	.+12     	; 0xbf2 <HID_Device_ProcessControlRequest+0x60>
 be6:	81 30       	cpi	r24, 0x01	; 1
 be8:	71 f0       	breq	.+28     	; 0xc06 <HID_Device_ProcessControlRequest+0x74>
 bea:	82 30       	cpi	r24, 0x02	; 2
 bec:	09 f4       	brne	.+2      	; 0xbf0 <HID_Device_ProcessControlRequest+0x5e>
 bee:	d0 c0       	rjmp	.+416    	; 0xd90 <HID_Device_ProcessControlRequest+0x1fe>
 bf0:	eb c0       	rjmp	.+470    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
 bf2:	8a 30       	cpi	r24, 0x0A	; 10
 bf4:	09 f4       	brne	.+2      	; 0xbf8 <HID_Device_ProcessControlRequest+0x66>
 bf6:	b4 c0       	rjmp	.+360    	; 0xd60 <HID_Device_ProcessControlRequest+0x1ce>
 bf8:	8b 30       	cpi	r24, 0x0B	; 11
 bfa:	09 f4       	brne	.+2      	; 0xbfe <HID_Device_ProcessControlRequest+0x6c>
 bfc:	9d c0       	rjmp	.+314    	; 0xd38 <HID_Device_ProcessControlRequest+0x1a6>
 bfe:	89 30       	cpi	r24, 0x09	; 9
 c00:	09 f0       	breq	.+2      	; 0xc04 <HID_Device_ProcessControlRequest+0x72>
 c02:	e2 c0       	rjmp	.+452    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
 c04:	4b c0       	rjmp	.+150    	; 0xc9c <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c06:	80 91 31 01 	lds	r24, 0x0131
 c0a:	81 3a       	cpi	r24, 0xA1	; 161
 c0c:	09 f0       	breq	.+2      	; 0xc10 <HID_Device_ProcessControlRequest+0x7e>
 c0e:	dc c0       	rjmp	.+440    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
 c10:	8d b6       	in	r8, 0x3d	; 61
 c12:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
 c14:	1a 82       	std	Y+2, r1	; 0x02
 c16:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c18:	80 91 33 01 	lds	r24, 0x0133
 c1c:	10 91 34 01 	lds	r17, 0x0134
 c20:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 c22:	f7 01       	movw	r30, r14
 c24:	40 85       	ldd	r20, Z+8	; 0x08
 c26:	50 e0       	ldi	r21, 0x00	; 0
 c28:	8d b7       	in	r24, 0x3d	; 61
 c2a:	9e b7       	in	r25, 0x3e	; 62
 c2c:	84 1b       	sub	r24, r20
 c2e:	95 0b       	sbc	r25, r21
 c30:	0f b6       	in	r0, 0x3f	; 63
 c32:	f8 94       	cli
 c34:	9e bf       	out	0x3e, r25	; 62
 c36:	0f be       	out	0x3f, r0	; 63
 c38:	8d bf       	out	0x3d, r24	; 61
 c3a:	ed b7       	in	r30, 0x3d	; 61
 c3c:	fe b7       	in	r31, 0x3e	; 62
 c3e:	31 96       	adiw	r30, 0x01	; 1
 c40:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
 c42:	60 e0       	ldi	r22, 0x00	; 0
 c44:	70 e0       	ldi	r23, 0x00	; 0
 c46:	cf 01       	movw	r24, r30
 c48:	bc d1       	rcall	.+888    	; 0xfc2 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 c4a:	4f ef       	ldi	r20, 0xFF	; 255
 c4c:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 c4e:	8e 01       	movw	r16, r28
 c50:	0f 5f       	subi	r16, 0xFF	; 255
 c52:	1f 4f       	sbci	r17, 0xFF	; 255
 c54:	96 01       	movw	r18, r12
 c56:	be 01       	movw	r22, r28
 c58:	6d 5f       	subi	r22, 0xFD	; 253
 c5a:	7f 4f       	sbci	r23, 0xFF	; 255
 c5c:	c7 01       	movw	r24, r14
 c5e:	89 da       	rcall	.-2798   	; 0x172 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 c60:	f7 01       	movw	r30, r14
 c62:	86 81       	ldd	r24, Z+6	; 0x06
 c64:	97 81       	ldd	r25, Z+7	; 0x07
 c66:	00 97       	sbiw	r24, 0x00	; 0
 c68:	21 f0       	breq	.+8      	; 0xc72 <HID_Device_ProcessControlRequest+0xe0>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 c6a:	40 85       	ldd	r20, Z+8	; 0x08
 c6c:	50 e0       	ldi	r21, 0x00	; 0
 c6e:	b6 01       	movw	r22, r12
 c70:	9f d1       	rcall	.+830    	; 0xfb0 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c72:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c76:	80 91 e8 00 	lds	r24, 0x00E8
 c7a:	87 7f       	andi	r24, 0xF7	; 247
 c7c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
 c80:	8b 81       	ldd	r24, Y+3	; 0x03
 c82:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c84:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 c88:	69 81       	ldd	r22, Y+1	; 0x01
 c8a:	7a 81       	ldd	r23, Y+2	; 0x02
 c8c:	c6 01       	movw	r24, r12
 c8e:	64 db       	rcall	.-2360   	; 0x358 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c90:	80 91 e8 00 	lds	r24, 0x00E8
 c94:	8b 77       	andi	r24, 0x7B	; 123
 c96:	80 93 e8 00 	sts	0x00E8, r24
 c9a:	37 c0       	rjmp	.+110    	; 0xd0a <HID_Device_ProcessControlRequest+0x178>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c9c:	80 91 31 01 	lds	r24, 0x0131
 ca0:	81 32       	cpi	r24, 0x21	; 33
 ca2:	09 f0       	breq	.+2      	; 0xca6 <HID_Device_ProcessControlRequest+0x114>
 ca4:	91 c0       	rjmp	.+290    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
 ca6:	8d b6       	in	r8, 0x3d	; 61
 ca8:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
 caa:	00 91 37 01 	lds	r16, 0x0137
 cae:	10 91 38 01 	lds	r17, 0x0138
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 cb2:	70 90 33 01 	lds	r7, 0x0133
 cb6:	60 90 34 01 	lds	r6, 0x0134
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 cba:	8d b7       	in	r24, 0x3d	; 61
 cbc:	9e b7       	in	r25, 0x3e	; 62
 cbe:	80 1b       	sub	r24, r16
 cc0:	91 0b       	sbc	r25, r17
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	f8 94       	cli
 cc6:	9e bf       	out	0x3e, r25	; 62
 cc8:	0f be       	out	0x3f, r0	; 63
 cca:	8d bf       	out	0x3d, r24	; 61
 ccc:	ed b7       	in	r30, 0x3d	; 61
 cce:	fe b7       	in	r31, 0x3e	; 62
 cd0:	31 96       	adiw	r30, 0x01	; 1
 cd2:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cd4:	80 91 e8 00 	lds	r24, 0x00E8
 cd8:	87 7f       	andi	r24, 0xF7	; 247
 cda:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 cde:	b8 01       	movw	r22, r16
 ce0:	cf 01       	movw	r24, r30
 ce2:	9d db       	rcall	.-2246   	; 0x41e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ce4:	80 91 e8 00 	lds	r24, 0x00E8
 ce8:	8e 77       	andi	r24, 0x7E	; 126
 cea:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 cee:	21 e0       	ldi	r18, 0x01	; 1
 cf0:	71 10       	cpse	r7, r1
 cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <HID_Device_ProcessControlRequest+0x164>
 cf4:	20 e0       	ldi	r18, 0x00	; 0
 cf6:	30 e0       	ldi	r19, 0x00	; 0
 cf8:	02 1b       	sub	r16, r18
 cfa:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 cfc:	2c 0d       	add	r18, r12
 cfe:	3d 1d       	adc	r19, r13
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 d00:	4f ef       	ldi	r20, 0xFF	; 255
 d02:	46 0d       	add	r20, r6

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 d04:	67 2d       	mov	r22, r7
 d06:	c7 01       	movw	r24, r14
 d08:	7b da       	rcall	.-2826   	; 0x200 <CALLBACK_HID_Device_ProcessHIDReport>
 d0a:	0f b6       	in	r0, 0x3f	; 63
 d0c:	f8 94       	cli
 d0e:	9e be       	out	0x3e, r9	; 62
 d10:	0f be       	out	0x3f, r0	; 63
 d12:	8d be       	out	0x3d, r8	; 61
 d14:	59 c0       	rjmp	.+178    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d16:	80 91 31 01 	lds	r24, 0x0131
 d1a:	81 3a       	cpi	r24, 0xA1	; 161
 d1c:	09 f0       	breq	.+2      	; 0xd20 <HID_Device_ProcessControlRequest+0x18e>
 d1e:	54 c0       	rjmp	.+168    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d20:	80 91 e8 00 	lds	r24, 0x00E8
 d24:	87 7f       	andi	r24, 0xF7	; 247
 d26:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d2a:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 d2e:	80 ff       	sbrs	r24, 0
 d30:	fc cf       	rjmp	.-8      	; 0xd2a <HID_Device_ProcessControlRequest+0x198>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 d32:	f7 01       	movw	r30, r14
 d34:	81 85       	ldd	r24, Z+9	; 0x09
 d36:	40 c0       	rjmp	.+128    	; 0xdb8 <HID_Device_ProcessControlRequest+0x226>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d38:	80 91 31 01 	lds	r24, 0x0131
 d3c:	81 32       	cpi	r24, 0x21	; 33
 d3e:	09 f0       	breq	.+2      	; 0xd42 <HID_Device_ProcessControlRequest+0x1b0>
 d40:	43 c0       	rjmp	.+134    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d42:	80 91 e8 00 	lds	r24, 0x00E8
 d46:	87 7f       	andi	r24, 0xF7	; 247
 d48:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d4c:	77 dc       	rcall	.-1810   	; 0x63c <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 d4e:	90 91 33 01 	lds	r25, 0x0133
 d52:	81 e0       	ldi	r24, 0x01	; 1
 d54:	91 11       	cpse	r25, r1
 d56:	01 c0       	rjmp	.+2      	; 0xd5a <HID_Device_ProcessControlRequest+0x1c8>
 d58:	80 e0       	ldi	r24, 0x00	; 0
 d5a:	f7 01       	movw	r30, r14
 d5c:	81 87       	std	Z+9, r24	; 0x09
 d5e:	34 c0       	rjmp	.+104    	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d60:	80 91 31 01 	lds	r24, 0x0131
 d64:	81 32       	cpi	r24, 0x21	; 33
 d66:	81 f5       	brne	.+96     	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
 d68:	80 91 e8 00 	lds	r24, 0x00E8
 d6c:	87 7f       	andi	r24, 0xF7	; 247
 d6e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d72:	64 dc       	rcall	.-1848   	; 0x63c <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 d74:	80 91 33 01 	lds	r24, 0x0133
 d78:	90 91 34 01 	lds	r25, 0x0134
 d7c:	88 27       	eor	r24, r24
 d7e:	36 e0       	ldi	r19, 0x06	; 6
 d80:	96 95       	lsr	r25
 d82:	87 95       	ror	r24
 d84:	3a 95       	dec	r19
 d86:	e1 f7       	brne	.-8      	; 0xd80 <HID_Device_ProcessControlRequest+0x1ee>
 d88:	f7 01       	movw	r30, r14
 d8a:	95 87       	std	Z+13, r25	; 0x0d
 d8c:	84 87       	std	Z+12, r24	; 0x0c
 d8e:	1c c0       	rjmp	.+56     	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d90:	80 91 31 01 	lds	r24, 0x0131
 d94:	81 3a       	cpi	r24, 0xA1	; 161
 d96:	c1 f4       	brne	.+48     	; 0xdc8 <HID_Device_ProcessControlRequest+0x236>
 d98:	80 91 e8 00 	lds	r24, 0x00E8
 d9c:	87 7f       	andi	r24, 0xF7	; 247
 d9e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 da2:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 da6:	80 ff       	sbrs	r24, 0
 da8:	fc cf       	rjmp	.-8      	; 0xda2 <HID_Device_ProcessControlRequest+0x210>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 daa:	f7 01       	movw	r30, r14
 dac:	84 85       	ldd	r24, Z+12	; 0x0c
 dae:	95 85       	ldd	r25, Z+13	; 0x0d
 db0:	96 95       	lsr	r25
 db2:	87 95       	ror	r24
 db4:	96 95       	lsr	r25
 db6:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 db8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dbc:	80 91 e8 00 	lds	r24, 0x00E8
 dc0:	8e 77       	andi	r24, 0x7E	; 126
 dc2:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 dc6:	3a dc       	rcall	.-1932   	; 0x63c <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 dc8:	0f b6       	in	r0, 0x3f	; 63
 dca:	f8 94       	cli
 dcc:	be be       	out	0x3e, r11	; 62
 dce:	0f be       	out	0x3f, r0	; 63
 dd0:	ad be       	out	0x3d, r10	; 61
 dd2:	0f 90       	pop	r0
 dd4:	0f 90       	pop	r0
 dd6:	0f 90       	pop	r0
 dd8:	df 91       	pop	r29
 dda:	cf 91       	pop	r28
 ddc:	1f 91       	pop	r17
 dde:	0f 91       	pop	r16
 de0:	ff 90       	pop	r15
 de2:	ef 90       	pop	r14
 de4:	df 90       	pop	r13
 de6:	cf 90       	pop	r12
 de8:	bf 90       	pop	r11
 dea:	af 90       	pop	r10
 dec:	9f 90       	pop	r9
 dee:	8f 90       	pop	r8
 df0:	7f 90       	pop	r7
 df2:	6f 90       	pop	r6
 df4:	08 95       	ret

00000df6 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 df6:	fc 01       	movw	r30, r24
 df8:	39 96       	adiw	r30, 0x09	; 9
 dfa:	27 e0       	ldi	r18, 0x07	; 7
 dfc:	df 01       	movw	r26, r30
 dfe:	1d 92       	st	X+, r1
 e00:	2a 95       	dec	r18
 e02:	e9 f7       	brne	.-6      	; 0xdfe <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 e04:	21 e0       	ldi	r18, 0x01	; 1
 e06:	fc 01       	movw	r30, r24
 e08:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
 e0a:	24 ef       	ldi	r18, 0xF4	; 244
 e0c:	31 e0       	ldi	r19, 0x01	; 1
 e0e:	35 87       	std	Z+13, r19	; 0x0d
 e10:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
 e12:	23 e0       	ldi	r18, 0x03	; 3
 e14:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
 e16:	61 e0       	ldi	r22, 0x01	; 1
 e18:	01 96       	adiw	r24, 0x01	; 1
 e1a:	d4 cb       	rjmp	.-2136   	; 0x5c4 <Endpoint_ConfigureEndpointTable>

00000e1c <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 e1c:	5f 92       	push	r5
 e1e:	6f 92       	push	r6
 e20:	7f 92       	push	r7
 e22:	8f 92       	push	r8
 e24:	9f 92       	push	r9
 e26:	af 92       	push	r10
 e28:	bf 92       	push	r11
 e2a:	cf 92       	push	r12
 e2c:	df 92       	push	r13
 e2e:	ef 92       	push	r14
 e30:	ff 92       	push	r15
 e32:	0f 93       	push	r16
 e34:	1f 93       	push	r17
 e36:	cf 93       	push	r28
 e38:	df 93       	push	r29
 e3a:	00 d0       	rcall	.+0      	; 0xe3c <HID_Device_USBTask+0x20>
 e3c:	1f 92       	push	r1
 e3e:	cd b7       	in	r28, 0x3d	; 61
 e40:	de b7       	in	r29, 0x3e	; 62
 e42:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
 e44:	ad b6       	in	r10, 0x3d	; 61
 e46:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e48:	80 91 30 01 	lds	r24, 0x0130
 e4c:	84 30       	cpi	r24, 0x04	; 4
 e4e:	09 f0       	breq	.+2      	; 0xe52 <HID_Device_USBTask+0x36>
 e50:	8a c0       	rjmp	.+276    	; 0xf66 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 e52:	80 91 e4 00 	lds	r24, 0x00E4
 e56:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
 e5a:	f7 01       	movw	r30, r14
 e5c:	22 85       	ldd	r18, Z+10	; 0x0a
 e5e:	33 85       	ldd	r19, Z+11	; 0x0b
 e60:	28 17       	cp	r18, r24
 e62:	39 07       	cpc	r19, r25
 e64:	09 f4       	brne	.+2      	; 0xe68 <HID_Device_USBTask+0x4c>
 e66:	7f c0       	rjmp	.+254    	; 0xf66 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e68:	81 81       	ldd	r24, Z+1	; 0x01
 e6a:	8f 70       	andi	r24, 0x0F	; 15
 e6c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e70:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
 e74:	85 ff       	sbrs	r24, 5
 e76:	77 c0       	rjmp	.+238    	; 0xf66 <HID_Device_USBTask+0x14a>
 e78:	8d b6       	in	r8, 0x3d	; 61
 e7a:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 e7c:	40 85       	ldd	r20, Z+8	; 0x08
 e7e:	50 e0       	ldi	r21, 0x00	; 0
 e80:	8d b7       	in	r24, 0x3d	; 61
 e82:	9e b7       	in	r25, 0x3e	; 62
 e84:	84 1b       	sub	r24, r20
 e86:	95 0b       	sbc	r25, r21
 e88:	0f b6       	in	r0, 0x3f	; 63
 e8a:	f8 94       	cli
 e8c:	9e bf       	out	0x3e, r25	; 62
 e8e:	0f be       	out	0x3f, r0	; 63
 e90:	8d bf       	out	0x3d, r24	; 61
 e92:	ed b7       	in	r30, 0x3d	; 61
 e94:	fe b7       	in	r31, 0x3e	; 62
 e96:	31 96       	adiw	r30, 0x01	; 1
 e98:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 e9a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 e9c:	1a 82       	std	Y+2, r1	; 0x02
 e9e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 ea0:	60 e0       	ldi	r22, 0x00	; 0
 ea2:	70 e0       	ldi	r23, 0x00	; 0
 ea4:	cf 01       	movw	r24, r30
 ea6:	8d d0       	rcall	.+282    	; 0xfc2 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 ea8:	8e 01       	movw	r16, r28
 eaa:	0f 5f       	subi	r16, 0xFF	; 255
 eac:	1f 4f       	sbci	r17, 0xFF	; 255
 eae:	96 01       	movw	r18, r12
 eb0:	40 e0       	ldi	r20, 0x00	; 0
 eb2:	be 01       	movw	r22, r28
 eb4:	6d 5f       	subi	r22, 0xFD	; 253
 eb6:	7f 4f       	sbci	r23, 0xFF	; 255
 eb8:	c7 01       	movw	r24, r14
 eba:	5b d9       	rcall	.-3402   	; 0x172 <CALLBACK_HID_Device_CreateHIDReport>
 ebc:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 ebe:	f7 01       	movw	r30, r14
 ec0:	84 85       	ldd	r24, Z+12	; 0x0c
 ec2:	95 85       	ldd	r25, Z+13	; 0x0d
 ec4:	89 2b       	or	r24, r25
 ec6:	41 f0       	breq	.+16     	; 0xed8 <HID_Device_USBTask+0xbc>
 ec8:	21 e0       	ldi	r18, 0x01	; 1
 eca:	86 85       	ldd	r24, Z+14	; 0x0e
 ecc:	97 85       	ldd	r25, Z+15	; 0x0f
 ece:	89 2b       	or	r24, r25
 ed0:	09 f0       	breq	.+2      	; 0xed4 <HID_Device_USBTask+0xb8>
 ed2:	20 e0       	ldi	r18, 0x00	; 0
 ed4:	72 2e       	mov	r7, r18
 ed6:	01 c0       	rjmp	.+2      	; 0xeda <HID_Device_USBTask+0xbe>
 ed8:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 eda:	f7 01       	movw	r30, r14
 edc:	06 81       	ldd	r16, Z+6	; 0x06
 ede:	17 81       	ldd	r17, Z+7	; 0x07
 ee0:	01 15       	cp	r16, r1
 ee2:	11 05       	cpc	r17, r1
 ee4:	89 f0       	breq	.+34     	; 0xf08 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 ee6:	49 81       	ldd	r20, Y+1	; 0x01
 ee8:	5a 81       	ldd	r21, Y+2	; 0x02
 eea:	b8 01       	movw	r22, r16
 eec:	c6 01       	movw	r24, r12
 eee:	53 d0       	rcall	.+166    	; 0xf96 <memcmp>
 ef0:	55 24       	eor	r5, r5
 ef2:	53 94       	inc	r5
 ef4:	89 2b       	or	r24, r25
 ef6:	09 f4       	brne	.+2      	; 0xefa <HID_Device_USBTask+0xde>
 ef8:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 efa:	f7 01       	movw	r30, r14
 efc:	40 85       	ldd	r20, Z+8	; 0x08
 efe:	50 e0       	ldi	r21, 0x00	; 0
 f00:	b6 01       	movw	r22, r12
 f02:	c8 01       	movw	r24, r16
 f04:	55 d0       	rcall	.+170    	; 0xfb0 <memcpy>
 f06:	01 c0       	rjmp	.+2      	; 0xf0a <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 f08:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 f0a:	29 81       	ldd	r18, Y+1	; 0x01
 f0c:	3a 81       	ldd	r19, Y+2	; 0x02
 f0e:	23 2b       	or	r18, r19
 f10:	f1 f0       	breq	.+60     	; 0xf4e <HID_Device_USBTask+0x132>
 f12:	61 10       	cpse	r6, r1
 f14:	04 c0       	rjmp	.+8      	; 0xf1e <HID_Device_USBTask+0x102>
 f16:	51 10       	cpse	r5, r1
 f18:	02 c0       	rjmp	.+4      	; 0xf1e <HID_Device_USBTask+0x102>
 f1a:	70 fe       	sbrs	r7, 0
 f1c:	18 c0       	rjmp	.+48     	; 0xf4e <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 f1e:	f7 01       	movw	r30, r14
 f20:	84 85       	ldd	r24, Z+12	; 0x0c
 f22:	95 85       	ldd	r25, Z+13	; 0x0d
 f24:	97 87       	std	Z+15, r25	; 0x0f
 f26:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f28:	81 81       	ldd	r24, Z+1	; 0x01
 f2a:	8f 70       	andi	r24, 0x0F	; 15
 f2c:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
 f30:	8b 81       	ldd	r24, Y+3	; 0x03
 f32:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 f34:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 f38:	69 81       	ldd	r22, Y+1	; 0x01
 f3a:	7a 81       	ldd	r23, Y+2	; 0x02
 f3c:	40 e0       	ldi	r20, 0x00	; 0
 f3e:	50 e0       	ldi	r21, 0x00	; 0
 f40:	c6 01       	movw	r24, r12
 f42:	c2 d9       	rcall	.-3196   	; 0x2c8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f44:	80 91 e8 00 	lds	r24, 0x00E8
 f48:	8e 77       	andi	r24, 0x7E	; 126
 f4a:	80 93 e8 00 	sts	0x00E8, r24
 f4e:	80 91 e4 00 	lds	r24, 0x00E4
 f52:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
 f56:	f7 01       	movw	r30, r14
 f58:	93 87       	std	Z+11, r25	; 0x0b
 f5a:	82 87       	std	Z+10, r24	; 0x0a
 f5c:	0f b6       	in	r0, 0x3f	; 63
 f5e:	f8 94       	cli
 f60:	9e be       	out	0x3e, r9	; 62
 f62:	0f be       	out	0x3f, r0	; 63
 f64:	8d be       	out	0x3d, r8	; 61
	}
}
 f66:	0f b6       	in	r0, 0x3f	; 63
 f68:	f8 94       	cli
 f6a:	be be       	out	0x3e, r11	; 62
 f6c:	0f be       	out	0x3f, r0	; 63
 f6e:	ad be       	out	0x3d, r10	; 61
 f70:	0f 90       	pop	r0
 f72:	0f 90       	pop	r0
 f74:	0f 90       	pop	r0
 f76:	df 91       	pop	r29
 f78:	cf 91       	pop	r28
 f7a:	1f 91       	pop	r17
 f7c:	0f 91       	pop	r16
 f7e:	ff 90       	pop	r15
 f80:	ef 90       	pop	r14
 f82:	df 90       	pop	r13
 f84:	cf 90       	pop	r12
 f86:	bf 90       	pop	r11
 f88:	af 90       	pop	r10
 f8a:	9f 90       	pop	r9
 f8c:	8f 90       	pop	r8
 f8e:	7f 90       	pop	r7
 f90:	6f 90       	pop	r6
 f92:	5f 90       	pop	r5
 f94:	08 95       	ret

00000f96 <memcmp>:
 f96:	fb 01       	movw	r30, r22
 f98:	dc 01       	movw	r26, r24
 f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <memcmp+0xe>
 f9c:	8d 91       	ld	r24, X+
 f9e:	01 90       	ld	r0, Z+
 fa0:	80 19       	sub	r24, r0
 fa2:	21 f4       	brne	.+8      	; 0xfac <memcmp+0x16>
 fa4:	41 50       	subi	r20, 0x01	; 1
 fa6:	50 40       	sbci	r21, 0x00	; 0
 fa8:	c8 f7       	brcc	.-14     	; 0xf9c <memcmp+0x6>
 faa:	88 1b       	sub	r24, r24
 fac:	99 0b       	sbc	r25, r25
 fae:	08 95       	ret

00000fb0 <memcpy>:
 fb0:	fb 01       	movw	r30, r22
 fb2:	dc 01       	movw	r26, r24
 fb4:	02 c0       	rjmp	.+4      	; 0xfba <memcpy+0xa>
 fb6:	01 90       	ld	r0, Z+
 fb8:	0d 92       	st	X+, r0
 fba:	41 50       	subi	r20, 0x01	; 1
 fbc:	50 40       	sbci	r21, 0x00	; 0
 fbe:	d8 f7       	brcc	.-10     	; 0xfb6 <memcpy+0x6>
 fc0:	08 95       	ret

00000fc2 <memset>:
 fc2:	dc 01       	movw	r26, r24
 fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <memset+0x6>
 fc6:	6d 93       	st	X+, r22
 fc8:	41 50       	subi	r20, 0x01	; 1
 fca:	50 40       	sbci	r21, 0x00	; 0
 fcc:	e0 f7       	brcc	.-8      	; 0xfc6 <memset+0x4>
 fce:	08 95       	ret

00000fd0 <_exit>:
 fd0:	f8 94       	cli

00000fd2 <__stop_program>:
 fd2:	ff cf       	rjmp	.-2      	; 0xfd2 <__stop_program>
