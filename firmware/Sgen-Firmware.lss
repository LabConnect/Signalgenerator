
Sgen-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000004c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080011c  0080011c  00000574  2**0
                  ALLOC
  3 .comment      00000027  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  0000059b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036c8  00000000  00000000  0000070b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016f2  00000000  00000000  00003dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010fd  00000000  00000000  000054c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d8  00000000  00000000  000065c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017d1  00000000  00000000  0000689c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d53  00000000  00000000  0000806d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00008dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
  22:	00 00       	nop
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
  28:	84 c1       	rjmp	.+776    	; 0x332 <__vector_10>
  2a:	00 00       	nop
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop

	if (Endpoint_IsSETUPReceived())
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop

		switch (USB_ControlRequest.bRequest)
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
  92:	00 00       	nop
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
				UEDATX = (Data >> 8);
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 ec       	ldi	r30, 0xC4	; 196
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ac 31       	cpi	r26, 0x1C	; 28
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
  d0:	ac e1       	ldi	r26, 0x1C	; 28
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
  d8:	a2 33       	cpi	r26, 0x32	; 50
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
  de:	8a d0       	rcall	.+276    	; 0x1f4 <main>
  e0:	ef c1       	rjmp	.+990    	; 0x4c0 <_exit>

000000e2 <__bad_interrupt>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <SetupHardware>:
			TWI_SendByte(0x10 | i);
			TWI_SendByte(DeviceConfig[PotiWert]);
		}

		TWI_SendByte(0x78);
		TWI_SendByte(0x01);
  e4:	84 b7       	in	r24, 0x34	; 52

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
  e6:	87 7f       	andi	r24, 0xF7	; 247
  e8:	84 bf       	out	0x34, r24	; 52
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	0f b6       	in	r0, 0x3f	; 63
		TWI_StopTransmission();
	}
	else
	{
		StatusDigiPoti = false;
  ee:	f8 94       	cli
  f0:	80 93 60 00 	sts	0x0060, r24
	}
	//*/
	return;
}
  f4:	10 92 60 00 	sts	0x0060, r1
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	90 e0       	ldi	r25, 0x00	; 0
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	80 93 61 00 	sts	0x0061, r24
 106:	90 93 61 00 	sts	0x0061, r25
 10a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
 10c:	f5 d0       	rcall	.+490    	; 0x2f8 <USB_Init>
 10e:	20 9a       	sbi	0x04, 0	; 4
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
 110:	28 9a       	sbi	0x05, 0	; 5
				PORTB |= (1 << 0);
 112:	84 b1       	in	r24, 0x04	; 4

				DDRB  |=  ((1 << 1) | (1 << 2));
 114:	86 60       	ori	r24, 0x06	; 6
 116:	84 b9       	out	0x04, r24	; 4
 118:	23 98       	cbi	0x04, 3	; 4
				DDRB  &= ~(1 << 3);
 11a:	85 b1       	in	r24, 0x05	; 5
				PORTB |=  ((1 << 3) | (1 << 1));
 11c:	8a 60       	ori	r24, 0x0A	; 10
 11e:	85 b9       	out	0x05, r24	; 5
 120:	8d b5       	in	r24, 0x2d	; 45

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
 122:	81 60       	ori	r24, 0x01	; 1
 124:	8d bd       	out	0x2d, r24	; 45
 126:	8a e5       	ldi	r24, 0x5A	; 90
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				//DDRB &= ~(1 << 0);

				SPCR  = ((1 << SPE) | SPIOptions);
 128:	8c bd       	out	0x2c, r24	; 44
 12a:	ec eb       	ldi	r30, 0xBC	; 188
			static inline void TWI_Init(const uint8_t Prescale,
			                            const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale,
			                            const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	84 60       	ori	r24, 0x04	; 4
 132:	80 83       	st	Z, r24
 134:	10 92 b9 00 	sts	0x00B9, r1
				TWSR  = Prescale;
 138:	80 e2       	ldi	r24, 0x20	; 32
				TWBR  = BitLength;
 13a:	80 93 b8 00 	sts	0x00B8, r24
 13e:	88 e3       	ldi	r24, 0x38	; 56
	
	//initialize I²C-Bus
	TWI_Init(TWI_BIT_PRESCALE_1, TWI_BITLENGTH_FROM_FREQ(1, 200000));
	//*/

	DDRD = 0x38;
 140:	8a b9       	out	0x0a, r24	; 10
 142:	8b b9       	out	0x0b, r24	; 11
	PORTD = 0x38;
 144:	08 95       	ret

00000146 <EVENT_USB_Device_Connect>:
 146:	08 95       	ret

00000148 <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 148:	08 95       	ret

0000014a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 14a:	80 91 0e 01 	lds	r24, 0x010E
 14e:	90 91 0f 01 	lds	r25, 0x010F
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	29 f0       	breq	.+10     	; 0x160 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	90 93 0f 01 	sts	0x010F, r25
 15c:	80 93 0e 01 	sts	0x010E, r24
 160:	08 95       	ret

00000162 <SPI_ausgabe>:
			}

			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB) ATTR_ALWAYS_INLINE;
			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB)
			{
				PORTB &= ~(1 << 0);
 162:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <SPI_ausgabe+0x4>
 16a:	00 00       	nop
				_delay_us(1);
				SPDR = MSB;
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 170:	0d b4       	in	r0, 0x2d	; 45
 172:	07 fe       	sbrs	r0, 7
 174:	fd cf       	rjmp	.-6      	; 0x170 <SPI_ausgabe+0xe>
				SPDR = LSB;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 17a:	0d b4       	in	r0, 0x2d	; 45
 17c:	07 fe       	sbrs	r0, 7
 17e:	fd cf       	rjmp	.-6      	; 0x17a <SPI_ausgabe+0x18>
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <SPI_ausgabe+0x20>
 186:	00 00       	nop
				_delay_us(1);
				PORTB |= (1 << 0);
 188:	28 9a       	sbi	0x05, 0	; 5
 18a:	8a e1       	ldi	r24, 0x1A	; 26
 18c:	8a 95       	dec	r24
 18e:	f1 f7       	brne	.-4      	; 0x18c <SPI_ausgabe+0x2a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <SPI_ausgabe+0x30>
			}

			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB) ATTR_ALWAYS_INLINE;
			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB)
			{
				PORTB &= ~(1 << 0);
 192:	28 98       	cbi	0x05, 0	; 5
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <SPI_ausgabe+0x34>
 19a:	00 00       	nop
				_delay_us(1);
				SPDR = MSB;
 19c:	82 e5       	ldi	r24, 0x52	; 82
 19e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 1a0:	0d b4       	in	r0, 0x2d	; 45
 1a2:	07 fe       	sbrs	r0, 7
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <SPI_ausgabe+0x3e>
				SPDR = LSB;
 1a6:	80 ec       	ldi	r24, 0xC0	; 192
 1a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 1aa:	0d b4       	in	r0, 0x2d	; 45
 1ac:	07 fe       	sbrs	r0, 7
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <SPI_ausgabe+0x48>
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <SPI_ausgabe+0x50>
 1b6:	00 00       	nop
				_delay_us(1);
				PORTB |= (1 << 0);
 1b8:	28 9a       	sbi	0x05, 0	; 5
 1ba:	8a e1       	ldi	r24, 0x1A	; 26
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <SPI_ausgabe+0x5a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <SPI_ausgabe+0x60>
			}

			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB) ATTR_ALWAYS_INLINE;
			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB)
			{
				PORTB &= ~(1 << 0);
 1c2:	28 98       	cbi	0x05, 0	; 5
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <SPI_ausgabe+0x64>
 1ca:	00 00       	nop
				_delay_us(1);
				SPDR = MSB;
 1cc:	80 e6       	ldi	r24, 0x60	; 96
 1ce:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 1d0:	0d b4       	in	r0, 0x2d	; 45
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <SPI_ausgabe+0x6e>
				SPDR = LSB;
 1d6:	85 ec       	ldi	r24, 0xC5	; 197
 1d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 1da:	0d b4       	in	r0, 0x2d	; 45
 1dc:	07 fe       	sbrs	r0, 7
 1de:	fd cf       	rjmp	.-6      	; 0x1da <SPI_ausgabe+0x78>
 1e0:	85 e0       	ldi	r24, 0x05	; 5
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <SPI_ausgabe+0x80>
 1e6:	00 00       	nop
				_delay_us(1);
				PORTB |= (1 << 0);
 1e8:	28 9a       	sbi	0x05, 0	; 5
 1ea:	8a e1       	ldi	r24, 0x1A	; 26
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <SPI_ausgabe+0x8a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <SPI_ausgabe+0x90>
	_delay_us(5);
	SPI_Send2Byte(0b01100000, 0b11000101);
	_delay_us(5);

	return;
}
 1f2:	08 95       	ret

000001f4 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 1f4:	77 df       	rcall	.-274    	; 0xe4 <SetupHardware>
 1f6:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 1f8:	b4 df       	rcall	.-152    	; 0x162 <SPI_ausgabe>

	GlobalInterruptEnable();
	//Daten_Verteilen();
	for (;;)
	{
		SPI_ausgabe();
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	89 e6       	ldi	r24, 0x69	; 105
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	98 e1       	ldi	r25, 0x18	; 24
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0xc>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x16>
 20a:	00 00       	nop
 20c:	f5 cf       	rjmp	.-22     	; 0x1f8 <main+0x4>

0000020e <Endpoint_ConfigureEndpoint_Prv>:
 20e:	98 2f       	mov	r25, r24
 210:	97 30       	cpi	r25, 0x07	; 7
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 212:	58 f5       	brcc	.+86     	; 0x26a <Endpoint_ConfigureEndpoint_Prv+0x5c>
 214:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 218:	98 17       	cp	r25, r24
 21a:	39 f0       	breq	.+14     	; 0x22a <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 21c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 220:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 224:	50 91 f0 00 	lds	r21, 0x00F0
 228:	03 c0       	rjmp	.+6      	; 0x230 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 22a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 22c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 22e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 230:	21 ff       	sbrs	r18, 1
 232:	19 c0       	rjmp	.+50     	; 0x266 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 234:	30 91 eb 00 	lds	r19, 0x00EB
 238:	3e 7f       	andi	r19, 0xFE	; 254
 23a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 23e:	30 91 ed 00 	lds	r19, 0x00ED
 242:	3d 7f       	andi	r19, 0xFD	; 253
 244:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 248:	30 91 eb 00 	lds	r19, 0x00EB
 24c:	31 60       	ori	r19, 0x01	; 1
 24e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 252:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 256:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 25a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 25e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 262:	27 ff       	sbrs	r18, 7
 264:	07 c0       	rjmp	.+14     	; 0x274 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 266:	9f 5f       	subi	r25, 0xFF	; 255
 268:	d3 cf       	rjmp	.-90     	; 0x210 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 26a:	8f 70       	andi	r24, 0x0F	; 15
 26c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 274:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 276:	08 95       	ret

00000278 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 280:	4b d0       	rcall	.+150    	; 0x318 <USB_INT_DisableAllInterrupts>
 282:	52 d0       	rcall	.+164    	; 0x328 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 284:	c8 ed       	ldi	r28, 0xD8	; 216
 286:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 288:	88 81       	ld	r24, Y
 28a:	8f 77       	andi	r24, 0x7F	; 127
 28c:	88 83       	st	Y, r24
 28e:	88 81       	ld	r24, Y
 290:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 292:	88 83       	st	Y, r24
 294:	88 81       	ld	r24, Y
 296:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 298:	88 83       	st	Y, r24
 29a:	19 bc       	out	0x29, r1	; 41
 29c:	10 92 29 01 	sts	0x0129, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 2a0:	10 92 25 01 	sts	0x0125, r1
	USB_Device_ConfigurationNumber  = 0;
 2a4:	10 92 27 01 	sts	0x0127, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 2a8:	10 92 26 01 	sts	0x0126, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 2ac:	00 ee       	ldi	r16, 0xE0	; 224
 2ae:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 2b0:	f8 01       	movw	r30, r16
 2b2:	80 81       	ld	r24, Z
 2b4:	8b 7f       	andi	r24, 0xFB	; 251
 2b6:	80 83       	st	Z, r24
 2b8:	88 81       	ld	r24, Y
 2ba:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 2bc:	88 83       	st	Y, r24
 2be:	42 e0       	ldi	r20, 0x02	; 2
 2c0:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	a4 df       	rcall	.-184    	; 0x20e <Endpoint_ConfigureEndpoint_Prv>
 2c6:	e1 ee       	ldi	r30, 0xE1	; 225
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	80 83       	st	Z, r24
 2d0:	e2 ee       	ldi	r30, 0xE2	; 226
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	80 83       	st	Z, r24
 2da:	80 81       	ld	r24, Z
 2dc:	88 60       	ori	r24, 0x08	; 8
 2de:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 2e0:	f8 01       	movw	r30, r16
 2e2:	80 81       	ld	r24, Z
 2e4:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 2e6:	80 83       	st	Z, r24
 2e8:	88 81       	ld	r24, Y
 2ea:	80 61       	ori	r24, 0x10	; 16
 2ec:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <USB_Init>:
 2f8:	e8 ed       	ldi	r30, 0xD8	; 216
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 2fe:	8f 7e       	andi	r24, 0xEF	; 239
 300:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 302:	e7 ed       	ldi	r30, 0xD7	; 215
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
 316:	b0 cf       	rjmp	.-160    	; 0x278 <USB_ResetInterface>

00000318 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 318:	e8 ed       	ldi	r30, 0xD8	; 216
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 322:	10 92 e2 00 	sts	0x00E2, r1
 326:	08 95       	ret

00000328 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 328:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 32c:	10 92 e1 00 	sts	0x00E1, r1
 330:	08 95       	ret

00000332 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 354:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 358:	82 ff       	sbrs	r24, 2
 35a:	0a c0       	rjmp	.+20     	; 0x370 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 35c:	80 91 e2 00 	lds	r24, 0x00E2
 360:	82 ff       	sbrs	r24, 2
 362:	06 c0       	rjmp	.+12     	; 0x370 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 364:	80 91 e1 00 	lds	r24, 0x00E1
 368:	8b 7f       	andi	r24, 0xFB	; 251
 36a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 36e:	ed de       	rcall	.-550    	; 0x14a <EVENT_USB_Device_StartOfFrame>
 370:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 374:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 376:	1d c0       	rjmp	.+58     	; 0x3b2 <__vector_10+0x80>
 378:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 37c:	80 ff       	sbrs	r24, 0
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <__vector_10+0x80>
 380:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 384:	8e 7f       	andi	r24, 0xFE	; 254
 386:	80 93 da 00 	sts	0x00DA, r24
 38a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 38e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 390:	0c c0       	rjmp	.+24     	; 0x3aa <__vector_10+0x78>
 392:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 394:	89 bd       	out	0x29, r24	; 41
 396:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 398:	89 bd       	out	0x29, r24	; 41
 39a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 39c:	00 fe       	sbrs	r0, 0
 39e:	fd cf       	rjmp	.-6      	; 0x39a <__vector_10+0x68>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 3a2:	80 93 29 01 	sts	0x0129, r24
 3a6:	cf de       	rcall	.-610    	; 0x146 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__vector_10+0x80>
 3aa:	19 bc       	out	0x29, r1	; 41
 3ac:	10 92 29 01 	sts	0x0129, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 3b0:	cb de       	rcall	.-618    	; 0x148 <EVENT_USB_Device_Disconnect>
 3b2:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 3b6:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 3b8:	18 c0       	rjmp	.+48     	; 0x3ea <__vector_10+0xb8>
 3ba:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 3be:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 3c0:	14 c0       	rjmp	.+40     	; 0x3ea <__vector_10+0xb8>
 3c2:	80 91 e2 00 	lds	r24, 0x00E2
 3c6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 3c8:	80 93 e2 00 	sts	0x00E2, r24
 3cc:	80 91 e2 00 	lds	r24, 0x00E2
 3d0:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 3d2:	80 93 e2 00 	sts	0x00E2, r24
 3d6:	80 91 d8 00 	lds	r24, 0x00D8
 3da:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 3dc:	80 93 d8 00 	sts	0x00D8, r24
 3e0:	19 bc       	out	0x29, r1	; 41
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	80 93 29 01 	sts	0x0129, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 3e8:	6a d0       	rcall	.+212    	; 0x4be <USB_Event_Stub>
 3ea:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 3ee:	84 ff       	sbrs	r24, 4
 3f0:	2f c0       	rjmp	.+94     	; 0x450 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 3f2:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 3f6:	84 ff       	sbrs	r24, 4
 3f8:	2b c0       	rjmp	.+86     	; 0x450 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 3fa:	80 e1       	ldi	r24, 0x10	; 16
 3fc:	89 bd       	out	0x29, r24	; 41
 3fe:	82 e1       	ldi	r24, 0x12	; 18
 400:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 402:	09 b4       	in	r0, 0x29	; 41
 404:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 406:	fd cf       	rjmp	.-6      	; 0x402 <__vector_10+0xd0>
 408:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 40c:	8f 7d       	andi	r24, 0xDF	; 223
 40e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 412:	80 91 e1 00 	lds	r24, 0x00E1
 416:	8f 7e       	andi	r24, 0xEF	; 239
 418:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 41c:	80 91 e2 00 	lds	r24, 0x00E2
 420:	8f 7e       	andi	r24, 0xEF	; 239
 422:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 426:	80 91 e2 00 	lds	r24, 0x00E2
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 430:	80 91 25 01 	lds	r24, 0x0125
 434:	88 23       	and	r24, r24
 436:	11 f0       	breq	.+4      	; 0x43c <__vector_10+0x10a>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	07 c0       	rjmp	.+14     	; 0x44a <__vector_10+0x118>
 43c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 440:	87 fd       	sbrc	r24, 7
 442:	02 c0       	rjmp	.+4      	; 0x448 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	01 c0       	rjmp	.+2      	; 0x44a <__vector_10+0x118>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	80 93 29 01 	sts	0x0129, r24
 44e:	37 d0       	rcall	.+110    	; 0x4be <USB_Event_Stub>
 450:	80 91 e1 00 	lds	r24, 0x00E1
 454:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 456:	22 c0       	rjmp	.+68     	; 0x49c <__vector_10+0x16a>
 458:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 45c:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 45e:	1e c0       	rjmp	.+60     	; 0x49c <__vector_10+0x16a>
 460:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 464:	87 7f       	andi	r24, 0xF7	; 247
 466:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	80 93 29 01 	sts	0x0129, r24
 470:	10 92 25 01 	sts	0x0125, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 474:	80 91 e1 00 	lds	r24, 0x00E1
 478:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 47a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 47e:	80 91 e2 00 	lds	r24, 0x00E2
 482:	8e 7f       	andi	r24, 0xFE	; 254
 484:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 488:	80 91 e2 00 	lds	r24, 0x00E2
 48c:	80 61       	ori	r24, 0x10	; 16
 48e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 492:	42 e0       	ldi	r20, 0x02	; 2
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	ba de       	rcall	.-652    	; 0x20e <Endpoint_ConfigureEndpoint_Prv>
 49a:	11 d0       	rcall	.+34     	; 0x4be <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <USB_Event_Stub>:
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
