
Sgen-Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000040a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080011c  0080011c  000004ba  2**0
                  ALLOC
  3 .comment      00000027  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  000004e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003142  00000000  00000000  00000651  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013ba  00000000  00000000  00003793  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001059  00000000  00000000  00004b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00005ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000015dd  00000000  00000000  00005e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c2d  00000000  00000000  00007441  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  0000806e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   0:	39 c0       	rjmp	.+114    	; 0x74 <__ctors_end>
   2:	00 00       	nop
   4:	52 c0       	rjmp	.+164    	; 0xaa <__bad_interrupt>
   6:	00 00       	nop
   8:	50 c0       	rjmp	.+160    	; 0xaa <__bad_interrupt>
   a:	00 00       	nop
   c:	4e c0       	rjmp	.+156    	; 0xaa <__bad_interrupt>
   e:	00 00       	nop
  10:	4c c0       	rjmp	.+152    	; 0xaa <__bad_interrupt>
  12:	00 00       	nop
  14:	4a c0       	rjmp	.+148    	; 0xaa <__bad_interrupt>
  16:	00 00       	nop
  18:	48 c0       	rjmp	.+144    	; 0xaa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	46 c0       	rjmp	.+140    	; 0xaa <__bad_interrupt>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
  1e:	00 00       	nop
  20:	44 c0       	rjmp	.+136    	; 0xaa <__bad_interrupt>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
  22:	00 00       	nop
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
  24:	42 c0       	rjmp	.+132    	; 0xaa <__bad_interrupt>
  26:	00 00       	nop
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
  28:	40 c0       	rjmp	.+128    	; 0xaa <__bad_interrupt>
  2a:	00 00       	nop
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  2c:	47 c1       	rjmp	.+654    	; 0x2bc <__vector_11>
  2e:	00 00       	nop

	if (Endpoint_IsSETUPReceived())
  30:	3c c0       	rjmp	.+120    	; 0xaa <__bad_interrupt>
  32:	00 00       	nop
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
  34:	3a c0       	rjmp	.+116    	; 0xaa <__bad_interrupt>
  36:	00 00       	nop

		switch (USB_ControlRequest.bRequest)
  38:	38 c0       	rjmp	.+112    	; 0xaa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	36 c0       	rjmp	.+108    	; 0xaa <__bad_interrupt>
  3e:	00 00       	nop
  40:	34 c0       	rjmp	.+104    	; 0xaa <__bad_interrupt>
  42:	00 00       	nop
  44:	32 c0       	rjmp	.+100    	; 0xaa <__bad_interrupt>
  46:	00 00       	nop
  48:	30 c0       	rjmp	.+96     	; 0xaa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2e c0       	rjmp	.+92     	; 0xaa <__bad_interrupt>
  4e:	00 00       	nop
  50:	2c c0       	rjmp	.+88     	; 0xaa <__bad_interrupt>
  52:	00 00       	nop
  54:	2a c0       	rjmp	.+84     	; 0xaa <__bad_interrupt>
  56:	00 00       	nop
  58:	28 c0       	rjmp	.+80     	; 0xaa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	26 c0       	rjmp	.+76     	; 0xaa <__bad_interrupt>
  5e:	00 00       	nop
  60:	24 c0       	rjmp	.+72     	; 0xaa <__bad_interrupt>
  62:	00 00       	nop
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  64:	22 c0       	rjmp	.+68     	; 0xaa <__bad_interrupt>
  66:	00 00       	nop
  68:	20 c0       	rjmp	.+64     	; 0xaa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1e c0       	rjmp	.+60     	; 0xaa <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  6e:	00 00       	nop
  70:	1c c0       	rjmp	.+56     	; 0xaa <__bad_interrupt>
  72:	00 00       	nop

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ea e0       	ldi	r30, 0x0A	; 10
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
  88:	f4 e0       	ldi	r31, 0x04	; 4
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	ac 31       	cpi	r26, 0x1C	; 28
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
  92:	b1 07       	cpc	r27, r17
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	ac e1       	ldi	r26, 0x1C	; 28
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a2 33       	cpi	r26, 0x32	; 50
				UEDATX = (Data >> 8);
  a2:	b1 07       	cpc	r27, r17
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	80 d0       	rcall	.+256    	; 0x1a8 <main>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  a8:	ae c1       	rjmp	.+860    	; 0x406 <_exit>

000000aa <__bad_interrupt>:
  aa:	aa cf       	rjmp	.-172    	; 0x0 <__vectors>

000000ac <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{

	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
  ac:	84 b7       	in	r24, 0x34	; 52
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	80 93 60 00 	sts	0x0060, r24
  bc:	10 92 60 00 	sts	0x0060, r1
  c0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	80 e8       	ldi	r24, 0x80	; 128
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	80 93 61 00 	sts	0x0061, r24
  ce:	90 93 61 00 	sts	0x0061, r25
  d2:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
  d4:	e4 d0       	rcall	.+456    	; 0x29e <USB_Init>
  d6:	20 9a       	sbi	0x04, 0	; 4
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
  d8:	28 9a       	sbi	0x05, 0	; 5
				PORTB |= (1 << 0);
  da:	84 b1       	in	r24, 0x04	; 4

				DDRB  |=  ((1 << 1) | (1 << 2));
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	84 b9       	out	0x04, r24	; 4
  e0:	23 98       	cbi	0x04, 3	; 4
				DDRB  &= ~(1 << 3);
  e2:	85 b1       	in	r24, 0x05	; 5
				PORTB |=  ((1 << 3) | (1 << 1));
  e4:	8a 60       	ori	r24, 0x0A	; 10
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	8d b5       	in	r24, 0x2d	; 45

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	8d bd       	out	0x2d, r24	; 45
  ee:	8a e5       	ldi	r24, 0x5A	; 90
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				//DDRB &= ~(1 << 0);

				SPCR  = ((1 << SPE) | SPIOptions);
  f0:	8c bd       	out	0x2c, r24	; 44
  f2:	88 e3       	ldi	r24, 0x38	; 56
	/*
	//initialize I²C-Bus
	TWI_Init(TWI_BIT_PRESCALE_1, TWI_BITLENGTH_FROM_FREQ(1, 200000));
	//*/

	DDRD = 0x38;
  f4:	8a b9       	out	0x0a, r24	; 10
  f6:	8b b9       	out	0x0b, r24	; 11
	PORTD = 0x38;
  f8:	08 95       	ret

000000fa <EVENT_USB_Device_Connect>:
  fa:	08 95       	ret

000000fc <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
  fc:	08 95       	ret

000000fe <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
  fe:	80 91 0e 01 	lds	r24, 0x010E
 102:	90 91 0f 01 	lds	r25, 0x010F
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	29 f0       	breq	.+10     	; 0x114 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	90 93 0f 01 	sts	0x010F, r25
 110:	80 93 0e 01 	sts	0x010E, r24
 114:	08 95       	ret

00000116 <SPI_ausgabe>:
			}

			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB) ATTR_ALWAYS_INLINE;
			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB)
			{
				PORTB &= ~(1 << 0);
 116:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <SPI_ausgabe+0x4>
 11e:	00 00       	nop
				_delay_us(1);
				SPDR = MSB;
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 124:	0d b4       	in	r0, 0x2d	; 45
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <SPI_ausgabe+0xe>
				SPDR = LSB;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 12e:	0d b4       	in	r0, 0x2d	; 45
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <SPI_ausgabe+0x18>
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <SPI_ausgabe+0x20>
 13a:	00 00       	nop
				_delay_us(1);
				PORTB |= (1 << 0);
 13c:	28 9a       	sbi	0x05, 0	; 5
 13e:	8a e1       	ldi	r24, 0x1A	; 26
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <SPI_ausgabe+0x2a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <SPI_ausgabe+0x30>
			}

			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB) ATTR_ALWAYS_INLINE;
			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB)
			{
				PORTB &= ~(1 << 0);
 146:	28 98       	cbi	0x05, 0	; 5
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <SPI_ausgabe+0x34>
 14e:	00 00       	nop
				_delay_us(1);
				SPDR = MSB;
 150:	82 e5       	ldi	r24, 0x52	; 82
 152:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 154:	0d b4       	in	r0, 0x2d	; 45
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <SPI_ausgabe+0x3e>
				SPDR = LSB;
 15a:	80 ec       	ldi	r24, 0xC0	; 192
 15c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 15e:	0d b4       	in	r0, 0x2d	; 45
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <SPI_ausgabe+0x48>
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <SPI_ausgabe+0x50>
 16a:	00 00       	nop
				_delay_us(1);
				PORTB |= (1 << 0);
 16c:	28 9a       	sbi	0x05, 0	; 5
 16e:	8a e1       	ldi	r24, 0x1A	; 26
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <SPI_ausgabe+0x5a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <SPI_ausgabe+0x60>
			}

			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB) ATTR_ALWAYS_INLINE;
			static inline void SPI_Send2Byte(const uint8_t MSB, const uint8_t LSB)
			{
				PORTB &= ~(1 << 0);
 176:	28 98       	cbi	0x05, 0	; 5
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <SPI_ausgabe+0x64>
 17e:	00 00       	nop
				_delay_us(1);
				SPDR = MSB;
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 184:	0d b4       	in	r0, 0x2d	; 45
 186:	07 fe       	sbrs	r0, 7
 188:	fd cf       	rjmp	.-6      	; 0x184 <SPI_ausgabe+0x6e>
				SPDR = LSB;
 18a:	85 ec       	ldi	r24, 0xC5	; 197
 18c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 18e:	0d b4       	in	r0, 0x2d	; 45
 190:	07 fe       	sbrs	r0, 7
 192:	fd cf       	rjmp	.-6      	; 0x18e <SPI_ausgabe+0x78>
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <SPI_ausgabe+0x80>
 19a:	00 00       	nop
				_delay_us(1);
				PORTB |= (1 << 0);
 19c:	28 9a       	sbi	0x05, 0	; 5
 19e:	8a e1       	ldi	r24, 0x1A	; 26
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <SPI_ausgabe+0x8a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <SPI_ausgabe+0x90>
	_delay_us(5);
	SPI_Send2Byte(0b01100000, 0b11000101);
	_delay_us(5);

	return;
}
 1a6:	08 95       	ret

000001a8 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 1a8:	81 df       	rcall	.-254    	; 0xac <SetupHardware>
 1aa:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 1ac:	b4 df       	rcall	.-152    	; 0x116 <SPI_ausgabe>

	GlobalInterruptEnable();
	//Daten_Verteilen();
	for (;;)
	{
		SPI_ausgabe();
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	89 e6       	ldi	r24, 0x69	; 105
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	98 e1       	ldi	r25, 0x18	; 24
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0xc>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x16>
 1be:	00 00       	nop
 1c0:	f5 cf       	rjmp	.-22     	; 0x1ac <main+0x4>

000001c2 <Endpoint_ConfigureEndpoint_Prv>:
 1c2:	98 2f       	mov	r25, r24
 1c4:	95 30       	cpi	r25, 0x05	; 5
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 1c6:	58 f5       	brcc	.+86     	; 0x21e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 1c8:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 1cc:	98 17       	cp	r25, r24
 1ce:	39 f0       	breq	.+14     	; 0x1de <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 1d0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 1d4:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 1d8:	50 91 f0 00 	lds	r21, 0x00F0
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 1de:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 1e0:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 1e2:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 1e4:	21 ff       	sbrs	r18, 1
 1e6:	19 c0       	rjmp	.+50     	; 0x21a <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 1e8:	30 91 eb 00 	lds	r19, 0x00EB
 1ec:	3e 7f       	andi	r19, 0xFE	; 254
 1ee:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 1f2:	30 91 ed 00 	lds	r19, 0x00ED
 1f6:	3d 7f       	andi	r19, 0xFD	; 253
 1f8:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 1fc:	30 91 eb 00 	lds	r19, 0x00EB
 200:	31 60       	ori	r19, 0x01	; 1
 202:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 206:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 20a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 20e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 212:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 216:	27 ff       	sbrs	r18, 7
 218:	07 c0       	rjmp	.+14     	; 0x228 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 21a:	9f 5f       	subi	r25, 0xFF	; 255
 21c:	d3 cf       	rjmp	.-90     	; 0x1c4 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 228:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 22a:	08 95       	ret

0000022c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 22c:	41 d0       	rcall	.+130    	; 0x2b0 <USB_INT_DisableAllInterrupts>
 22e:	43 d0       	rcall	.+134    	; 0x2b6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 230:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 234:	8f 77       	andi	r24, 0x7F	; 127
 236:	80 93 d8 00 	sts	0x00D8, r24
 23a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	80 93 d8 00 	sts	0x00D8, r24
 244:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 248:	8f 7d       	andi	r24, 0xDF	; 223
 24a:	80 93 d8 00 	sts	0x00D8, r24
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 256:	09 b4       	in	r0, 0x29	; 41
 258:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 25a:	fd cf       	rjmp	.-6      	; 0x256 <USB_ResetInterface+0x2a>
 25c:	10 92 29 01 	sts	0x0129, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 260:	10 92 25 01 	sts	0x0125, r1
	USB_Device_ConfigurationNumber  = 0;
 264:	10 92 27 01 	sts	0x0127, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 268:	10 92 26 01 	sts	0x0126, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 26c:	42 e0       	ldi	r20, 0x02	; 2
 26e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	a7 df       	rcall	.-178    	; 0x1c2 <Endpoint_ConfigureEndpoint_Prv>
 274:	80 91 e1 00 	lds	r24, 0x00E1
 278:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 27a:	80 93 e1 00 	sts	0x00E1, r24
 27e:	80 91 e2 00 	lds	r24, 0x00E2
 282:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 284:	80 93 e2 00 	sts	0x00E2, r24
 288:	80 91 e2 00 	lds	r24, 0x00E2
 28c:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 28e:	80 93 e2 00 	sts	0x00E2, r24
 292:	80 91 e0 00 	lds	r24, 0x00E0
 296:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 298:	80 93 e0 00 	sts	0x00E0, r24
 29c:	08 95       	ret

0000029e <USB_Init>:
 29e:	e3 e6       	ldi	r30, 0x63	; 99
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 2a4:	8e 7f       	andi	r24, 0xFE	; 254
 2a6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
 2ae:	be cf       	rjmp	.-132    	; 0x22c <USB_ResetInterface>

000002b0 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 2b0:	10 92 e2 00 	sts	0x00E2, r1
 2b4:	08 95       	ret

000002b6 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 2b6:	10 92 e1 00 	sts	0x00E1, r1
 2ba:	08 95       	ret

000002bc <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 2de:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 2e2:	82 ff       	sbrs	r24, 2
 2e4:	0a c0       	rjmp	.+20     	; 0x2fa <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 2e6:	80 91 e2 00 	lds	r24, 0x00E2
 2ea:	82 ff       	sbrs	r24, 2
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 2ee:	80 91 e1 00 	lds	r24, 0x00E1
 2f2:	8b 7f       	andi	r24, 0xFB	; 251
 2f4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 2f8:	02 df       	rcall	.-508    	; 0xfe <EVENT_USB_Device_StartOfFrame>
 2fa:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 2fe:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 300:	17 c0       	rjmp	.+46     	; 0x330 <__vector_11+0x74>
 302:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 306:	80 ff       	sbrs	r24, 0
 308:	13 c0       	rjmp	.+38     	; 0x330 <__vector_11+0x74>
 30a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 30e:	8e 7f       	andi	r24, 0xFE	; 254
 310:	80 93 e2 00 	sts	0x00E2, r24
 314:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 318:	80 61       	ori	r24, 0x10	; 16
 31a:	80 93 e2 00 	sts	0x00E2, r24
 31e:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 322:	80 62       	ori	r24, 0x20	; 32
 324:	80 93 d8 00 	sts	0x00D8, r24
 328:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 32a:	10 92 29 01 	sts	0x0129, r1

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 32e:	e6 de       	rcall	.-564    	; 0xfc <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
 330:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 334:	84 ff       	sbrs	r24, 4
 336:	2f c0       	rjmp	.+94     	; 0x396 <__vector_11+0xda>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 338:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 33c:	84 ff       	sbrs	r24, 4
 33e:	2b c0       	rjmp	.+86     	; 0x396 <__vector_11+0xda>
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 344:	86 e0       	ldi	r24, 0x06	; 6
 346:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 348:	09 b4       	in	r0, 0x29	; 41
 34a:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 34c:	fd cf       	rjmp	.-6      	; 0x348 <__vector_11+0x8c>
 34e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 352:	8f 7d       	andi	r24, 0xDF	; 223
 354:	80 93 d8 00 	sts	0x00D8, r24
 358:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 35c:	8f 7e       	andi	r24, 0xEF	; 239
 35e:	80 93 e1 00 	sts	0x00E1, r24
 362:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 366:	8f 7e       	andi	r24, 0xEF	; 239
 368:	80 93 e2 00 	sts	0x00E2, r24
 36c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 93 e2 00 	sts	0x00E2, r24
 376:	80 91 25 01 	lds	r24, 0x0125
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 37a:	88 23       	and	r24, r24
 37c:	11 f0       	breq	.+4      	; 0x382 <__vector_11+0xc6>
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	07 c0       	rjmp	.+14     	; 0x390 <__vector_11+0xd4>
		  USB_DeviceState = DEVICE_STATE_Configured;
 382:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 386:	87 fd       	sbrc	r24, 7
 388:	02 c0       	rjmp	.+4      	; 0x38e <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	01 c0       	rjmp	.+2      	; 0x390 <__vector_11+0xd4>
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	80 93 29 01 	sts	0x0129, r24
 394:	b2 de       	rcall	.-668    	; 0xfa <EVENT_USB_Device_Connect>
 396:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 39a:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 39c:	22 c0       	rjmp	.+68     	; 0x3e2 <__vector_11+0x126>
 39e:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 3a2:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 3a4:	1e c0       	rjmp	.+60     	; 0x3e2 <__vector_11+0x126>
 3a6:	80 91 e1 00 	lds	r24, 0x00E1
 3aa:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 3ac:	80 93 e1 00 	sts	0x00E1, r24
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	80 93 29 01 	sts	0x0129, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 3b6:	10 92 25 01 	sts	0x0125, r1
 3ba:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
 3be:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 3c0:	80 93 e1 00 	sts	0x00E1, r24
 3c4:	80 91 e2 00 	lds	r24, 0x00E2
 3c8:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 3ca:	80 93 e2 00 	sts	0x00E2, r24
 3ce:	80 91 e2 00 	lds	r24, 0x00E2
 3d2:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 3d4:	80 93 e2 00 	sts	0x00E2, r24
 3d8:	42 e0       	ldi	r20, 0x02	; 2
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 3de:	f1 de       	rcall	.-542    	; 0x1c2 <Endpoint_ConfigureEndpoint_Prv>
 3e0:	11 d0       	rcall	.+34     	; 0x404 <USB_Event_Stub>
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <USB_Event_Stub>:
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
